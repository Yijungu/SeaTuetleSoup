{"ast":null,"code":"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport QnA from \"../../component/qna\";\nimport \"./page.css\";\nimport F22FBeta from \"../../images/F22FBeta.png\";\nimport { useNavigate } from \"react-router-dom\";\nimport Profile from \"../../images/Profile.png\";\nimport SendButton from \"../../images/SendButton.png\";\nimport Loading from \"../../component/loading\";\nimport { motion } from \"framer-motion\";\nimport Modal from \"react-modal\";\nimport ScrollToTopButton from \"../../component/scrollbutton\";\n\n// export default function Problem() {\n//   const [text, setText] = useState(\"\");\n//   const [qnas, setQnas] = useState([]);\n//   const [question, setQuestion] = useState(\"\");\n//   const navigate = useNavigate();\n//   const [shake, setShake] = useState(false);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [gameAttempts, setGameAttempts] = useState(0);\n//   const [correctAnswers, setCorrectAnswers] = useState(0);\n//   const [giveUpCount, setGiveUpCount] = useState(0);\n//   const [totalQuestionsAsked, setTotalQuestionsAsked] = useState(0);\n//   const [updateState, setUpdateState] = useState(false);\n//   const [tabPressed, setTabPressed] = useState(false);\n//   const [isProcessing, setIsProcessing] = useState(false);\n//   const [nickname, setNickname] = useState(\"\");\n//   const [modalIsOpen, setModalIsOpen] = useState(false);\n//   const [hintmodalIsOpen, setHintModalIsOpen] = useState(false);\n//   const [text_t, setText_t] = useState(\"\");\n//   const [author, setAuthor] = useState(\"\");\n//   const [main_character, setMainCharacter] = useState(\"\");\n//   const [text_question, setText_Question] = useState(\n//     \"어떤 대상에 대해 알고 싶으신가요?\"\n//   );\n//   const [question_step, setQuestion_Step] = useState(false);\n//   const [givup, setGiveUp] = useState(false);\n//   const [question_2step_text, setQuestion_2step_Text] = useState(\"\");\n//   const [hintText, setHintText] = useState(\"1단계 힌트\");\n//   const [hintText2, setHintText2] = useState(\"2단계 힌트\");\n//   const [hint, setHint] = useState(\"없음\");\n//   const [hint2, setHint2] = useState(\"없음\");\n\n//   useEffect(() => {\n//     const now = new Date();\n//     const currentDate = `${now.getFullYear()}-${\n//       now.getMonth() + 1\n//     }-${now.getDate()}`;\n//     let lastTime = localStorage.getItem(\"startTime\");\n//     if (lastTime) {\n//       lastTime = new Date(lastTime);\n//       const lastDate = `${lastTime.getFullYear()}-${\n//         lastTime.getMonth() + 1\n//       }-${lastTime.getDate()}`;\n//       if (lastDate !== currentDate) {\n//         localStorage.setItem(\"startTime\", now);\n//         localStorage.setItem(\"endTime\", \"\");\n//       }\n//     } else {\n//       localStorage.setItem(\"startTime\", now);\n//       localStorage.setItem(\"endTime\", \"\");\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     const savedNickname = localStorage.getItem(\"nickname\");\n//     if (savedNickname) {\n//       setNickname(savedNickname);\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     // 현재 날짜를 구한다\n//     const now = new Date();\n//     const currentDate = `${now.getFullYear()}-${\n//       now.getMonth() + 1\n//     }-${now.getDate()}`;\n\n//     // 이전에 저장한 날짜를 불러온다\n//     const savedDate = localStorage.getItem(\"date\");\n//     const savedGameAttempts = Number(localStorage.getItem(\"gameAttempts\"));\n//     const savedCorrectAnswers = Number(localStorage.getItem(\"correctAnswers\"));\n\n//     const savedGiveUpCount = Number(localStorage.getItem(\"giveUpCount\"));\n//     const savedTotalQuestionsAsked = Number(\n//       localStorage.getItem(\"totalQuestionsAsked\")\n//     );\n\n//     // 날짜가 다르면 모든 값을 초기화한다\n//     if (savedDate !== currentDate) {\n//       setGameAttempts(savedGameAttempts + 1);\n//       setTotalQuestionsAsked(0);\n//       // localStorage.setItem(\"date\", currentDate);\n//     } else {\n//       // 같은 날이면 localStorage에 저장된 값을 불러온다\n//       setGameAttempts(savedGameAttempts || 1);\n//       setTotalQuestionsAsked(savedTotalQuestionsAsked || 0);\n//     }\n\n//     setCorrectAnswers(savedCorrectAnswers);\n\n//     setGiveUpCount(savedGiveUpCount || 0);\n//   }, []);\n\n//   // 값들이 변경될 때마다 localStorage에 저장한다\n//   useEffect(() => {\n//     localStorage.setItem(\"gameAttempts\", gameAttempts);\n//     localStorage.setItem(\"giveUpCount\", giveUpCount);\n//     localStorage.setItem(\"correctAnswers\", correctAnswers);\n//     localStorage.setItem(\"totalQuestionsAsked\", totalQuestionsAsked);\n//   }, [gameAttempts, correctAnswers, giveUpCount, totalQuestionsAsked]);\n\n//   const saveQnas = (qnas) => {\n//     localStorage.setItem(\"qnas\", JSON.stringify(qnas));\n//   };\n\n//   useEffect(() => {\n//     const savedQnas = JSON.parse(localStorage.getItem(\"qnas\"));\n//     const savedDate = localStorage.getItem(\"date\");\n\n//     const now = new Date();\n//     const currentDate = `${now.getFullYear()}-${\n//       now.getMonth() + 1\n//     }-${now.getDate()}`;\n\n//     if (savedQnas && savedDate === currentDate) {\n//       setQnas(savedQnas);\n//     } else {\n//       localStorage.removeItem(\"qnas\");\n//       localStorage.setItem(\"date\", currentDate);\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     if (updateState) {\n//       if (givup) {\n//         navigate(\"/explanation\", { state: { userAnswer: \"\" } });\n//         setUpdateState(false);\n//       } else {\n//         navigate(\"/explanation\", { state: { userAnswer: text_t } });\n//         // 상태 업데이트 완료 표시\n//         setUpdateState(false);\n//       }\n//     }\n//   }, [updateState, text]);\n\n//   useEffect(() => {\n//     axios\n//       .get(process.env.REACT_APP_API_URL + \"/getQuestion/\")\n//       .then((response) => {\n//         const data = response.data;\n//         setQuestion(data.question);\n//         setAuthor(data.author);\n//         setMainCharacter(data.main_character);\n//         setHint(\n//           data.hints && data.hints.length > 0 ? data.hints[0].hint : null\n//         );\n//         setHint2(\n//           data.hints && data.hints.length > 1 ? data.hints[1].hint : null\n//         );\n//       })\n//       .catch((error) => {\n//         console.error(\"There was an error!\", error);\n//       });\n//   }, []);\n\n//   useEffect(() => {\n//     if (tabPressed) {\n//       setText_Question(\"정답을 말해주세요.\");\n//     } else {\n//       if (question_step) {\n//         setText_Question(\"질문을 완성해주세요.\");\n//       } else {\n//         setText_Question(\"어떤 대상에 대해 알고 싶으신가요?\");\n//       }\n//     }\n//   }, [tabPressed, question_step]);\n\n//   const handleChange = (e) => {\n//     setText(e.target.value);\n//   };\n//   const handleQuesionCheckcclick = (asnync) => {\n//     setTabPressed(false);\n//     setQuestion_Step(false);\n//   };\n//   const handleAnswerCheckcclick = (asnync) => {\n//     setTabPressed(true);\n//     setQuestion_Step(false);\n//   };\n\n//   const handleLogoClick = async () => {\n//     navigate(\"/\");\n//   };\n\n//   const handleKeyPress = (e) => {\n//     if (e.key === \"Enter\") {\n//       e.preventDefault();\n//       handleSendClick();\n//     }\n//     if (e.key === \"Tab\") {\n//       e.preventDefault();\n//       setTabPressed(!tabPressed);\n//       setQuestion_Step(false);\n//     }\n//     if (e.key === \"Escape\") {\n//       setQuestion_Step(false);\n//     }\n//   };\n\n//   const handleGiveUpClick = async () => {\n//     closeModal();\n//     const lastGiveUpDate = localStorage.getItem(\"lastGiveUpDate\");\n//     const lastCorrectDate = localStorage.getItem(\"lastCorrectDate\");\n//     const now = new Date();\n//     const currentDate = `${now.getFullYear()}-${\n//       now.getMonth() + 1\n//     }-${now.getDate()}`;\n//     localStorage.setItem(\"endTime\", now);\n//     // 마지막으로 정답을 맞춘 날짜와 현재 날짜를 비교하기\n//     if (lastGiveUpDate !== currentDate && lastCorrectDate !== currentDate) {\n//       // 현재 날짜를 마지막으로 정답을 맞춘 날짜로 저장\n\n//       localStorage.setItem(\"lastGiveUpDate\", currentDate);\n\n//       // 실패 횟수를 증가\n//       setGiveUpCount(giveUpCount + 1);\n//     }\n//     setGiveUp(true);\n//     setUpdateState(true);\n//   };\n\n//   const handleSendClick = async () => {\n//     if (isProcessing) return;\n//     // 실행 중이 아니라면, 실행 중임을 표시\n//     setIsProcessing(true);\n//     try {\n//       setText_t(text);\n//       const text_x = text;\n//       setTimeout(() => setText(\"\"), 0);\n//       // console.log(process.env.REACT_APP_API_URL + \"/submit/\");\n//       if (tabPressed === true) {\n//         // 텍스트가 '정답'으로 시작하면 다른 주소로 요청\n//         if (text_x.length <= 5) {\n//           setShake(true); // 실패 시 shake 상태를 true로 변경\n//           console.log(\"aaa\");\n//           const newQnas = [\n//             {\n//               question: text_x,\n//               aiQuestion: \"\",\n//               answer: \"ㅁㄴㅇㅁㅇ\",\n//             },\n//             ...qnas,\n//           ];\n//           setQnas(newQnas);\n//           saveQnas(newQnas);\n//           setTotalQuestionsAsked(totalQuestionsAsked + 1);\n//           setTimeout(() => setShake(false), 500);\n//         } else {\n//           console.log(\"bbb\");\n//           const anotherResponse = await axios.post(\n//             process.env.REACT_APP_API_URL + \"/submit/\",\n//             {\n//               data: text_x,\n//             }\n//           );\n//           console.log(anotherResponse.data.response);\n//           if (\n//             anotherResponse.data.response.startsWith(\"네\") ||\n//             anotherResponse.data.response.startsWith(\"예\") ||\n//             anotherResponse.data.response.startsWith(\"맞습니다\") ||\n//             anotherResponse.data.response.startsWith(\"Yes\")\n//           ) {\n//             const now = new Date();\n//             const currentDate = `${now.getFullYear()}-${\n//               now.getMonth() + 1\n//             }-${now.getDate()}`;\n\n//             localStorage.setItem(\"endTime\", now);\n//             // 마지막으로 정답을 맞춘 날짜를 불러오기\n//             const lastCorrectDate = localStorage.getItem(\"lastCorrectDate\");\n//             const lastGiveUpDate = localStorage.getItem(\"lastGiveUpDate\");\n\n//             // 마지막으로 정답을 맞춘 날짜와 현재 날짜를 비교하기\n//             if (\n//               lastGiveUpDate !== currentDate &&\n//               lastCorrectDate !== currentDate\n//             ) {\n//               // 현재 날짜를 마지막으로 정답을 맞춘 날짜로 저장\n//               localStorage.setItem(\"lastCorrectDate\", currentDate);\n\n//               // 정답 횟수를 증가\n//               setCorrectAnswers((prev) => prev + 1);\n\n//               // setUpdateState(true);\n//             }\n//             setUpdateState(true);\n//           } else {\n//             setShake(true); // 실패 시 shake 상태를 true로 변경\n//             const newQnas = [\n//               { question: text_x, aiQuestion: \"\", answer: \"정답이 아닙니다.\" },\n//               ...qnas,\n//             ];\n//             setQnas(newQnas);\n//             saveQnas(newQnas);\n//             setTotalQuestionsAsked(totalQuestionsAsked + 1);\n//             setTimeout(() => setShake(false), 500);\n//           }\n//         }\n//       } else {\n//         if (!question_step) {\n//           setQuestion_Step(true);\n//           setText_t(text);\n//           setTimeout(() => setText(\"\"), 0);\n//           const response = await axios.post(\n//             process.env.REACT_APP_API_URL + \"/getJosa/\",\n//             {\n//               data: text_x,\n//             }\n//           );\n//           setQuestion_2step_Text(response.data.response);\n//         } else {\n//           setQuestion_Step(false);\n//           const tempQnas = [\n//             {\n//               question: question_2step_text + \" \" + text_x,\n//               answer: <Loading />,\n//             },\n//             ...qnas,\n//           ];\n//           setQnas(tempQnas); // 임시로 Loading 애니메이션을 표시\n\n//           const response = await axios.post(\n//             process.env.REACT_APP_API_URL + \"/question/\",\n//             {\n//               data: question_2step_text + \" \" + text_x + \"?\",\n//             }\n//           );\n\n//           let updatedQnas;\n//           if (response.data.response.startsWith(\"네\")) {\n//             // if (true) {\n//             updatedQnas = tempQnas.map((qna) =>\n//               qna.question === question_2step_text + \" \" + text_x &&\n//               qna.answer.type === Loading\n//                 ? {\n//                     question: question_2step_text + \" \" + text_x,\n//                     answer: response.data.response,\n//                   }\n//                 : qna\n//             );\n//           } else if (response.data.response.startsWith(\"아니오\")) {\n//             updatedQnas = tempQnas.map((qna) =>\n//               qna.question === question_2step_text + \" \" + text_x &&\n//               qna.answer.type === Loading\n//                 ? {\n//                     question: question_2step_text + \" \" + text_x,\n//                     answer: \"아니오.\",\n//                   }\n//                 : qna\n//             );\n//           } else {\n//             updatedQnas = tempQnas.map((qna) =>\n//               qna.question === question_2step_text + \" \" + text_x &&\n//               qna.answer.type === Loading\n//                 ? {\n//                     question: question_2step_text + \" \" + text_x,\n//                     answer: \"중요하지 않은 내용입니다.\",\n//                   }\n//                 : qna\n//             );\n//           }\n//           setQnas(updatedQnas); // 응답으로 교체\n//           saveQnas(updatedQnas);\n//           setTotalQuestionsAsked(totalQuestionsAsked + 1); // localStorage에 저장\n//         }\n//       }\n//       setIsProcessing(false);\n//     } catch (error) {\n//       setIsLoading(false);\n//       setIsProcessing(false);\n//       console.error(error);\n//     }\n//   };\n//   //       } else {\n//   //         console.log(\"adsasd\");\n//   //         setQuestion_Step(false);\n//   //         const tempQnas = [\n//   //           {\n//   //             question: question_2step_text + \" \" + text_x,\n//   //             aiQuestion: <Loading />,\n//   //             answer: <Loading />,\n//   //           },\n//   //           ...qnas,\n//   //         ];\n//   //         setQnas(tempQnas); // 임시로 Loading 애니메이션을 표시\n//   //         console.log(\"adsasd1\");\n//   //         const response = await axios.post(\n//   //           process.env.REACT_APP_API_URL + \"/question/\",\n//   //           {\n//   //             data: question_2step_text + \" \" + text_x,\n//   //           }\n//   //         );\n\n//   //         let updatedQnas;\n//   //         console.log(response.data.response);\n//   //         console.log(response.data.ai_question);\n//   //         let responseString = JSON.stringify(response.data.response);\n//   //         if (\n//   //           responseString.includes(\"Yes\") ||\n//   //           responseString.includes(\"yes\")\n//   //         ) {\n//   //           // if (true) {\n//   //           updatedQnas = tempQnas.map((qna) =>\n//   //             qna.question === question_2step_text + \" \" + text_x &&\n//   //             qna.aiQuestion.type === Loading &&\n//   //             qna.answer.type === Loading\n//   //               ? {\n//   //                   question: question_2step_text + \" \" + text_x,\n//   //                   aiQuestion: response.data.ai_question,\n//   //                   answer: \"네.\",\n//   //                 }\n//   //               : qna\n//   //           );\n//   //         } else if (\n//   //           responseString.includes(\"No\") ||\n//   //           responseString.includes(\"no\")\n//   //         ) {\n//   //           updatedQnas = tempQnas.map((qna) =>\n//   //             qna.question === question_2step_text + \" \" + text_x &&\n//   //             qna.aiQuestion.type === Loading &&\n//   //             qna.answer.type === Loading\n//   //               ? {\n//   //                   question: question_2step_text + \" \" + text_x,\n//   //                   aiQuestion: response.data.ai_question,\n//   //                   answer: \"아니오.\",\n//   //                 }\n//   //               : qna\n//   //           );\n//   //         } else if (\n//   //           responseString.includes(\"Probably not\") ||\n//   //           responseString.includes(\"Probably not.\")\n//   //         ) {\n//   //           updatedQnas = tempQnas.map((qna) =>\n//   //             qna.question === question_2step_text + \" \" + text_x &&\n//   //             qna.aiQuestion.type === Loading &&\n//   //             qna.answer.type === Loading\n//   //               ? {\n//   //                   question: question_2step_text + \" \" + text_x,\n//   //                   aiQuestion: response.data.ai_question,\n//   //                   answer: \"아마도 맞을 겁니다.\",\n//   //                 }\n//   //               : qna\n//   //           );\n//   //         } else if (\n//   //           responseString.includes(\"Probably.\") ||\n//   //           responseString.includes(\"Probably\")\n//   //         ) {\n//   //           updatedQnas = tempQnas.map((qna) =>\n//   //             qna.question === question_2step_text + \" \" + text_x &&\n//   //             qna.aiQuestion.type === Loading &&\n//   //             qna.answer.type === Loading\n//   //               ? {\n//   //                   question: question_2step_text + \" \" + text_x,\n//   //                   aiQuestion: response.data.ai_question,\n//   //                   answer: \"아마도 아닐 겁니다.\",\n//   //                 }\n//   //               : qna\n//   //           );\n//   //         } else {\n//   //           updatedQnas = tempQnas.map((qna) =>\n//   //             qna.question === question_2step_text + \" \" + text_x &&\n//   //             qna.aiQuestion.type === Loading &&\n//   //             qna.answer.type === Loading\n//   //               ? {\n//   //                   question: question_2step_text + \" \" + text_x,\n//   //                   aiQuestion: response.data.ai_question,\n//   //                   answer: \"필요없는 정보입니다.\",\n//   //                 }\n//   //               : qna\n//   //           );\n//   //         }\n//   //         setQnas(updatedQnas); // 응답으로 교체\n//   //         saveQnas(updatedQnas);\n//   //         setTotalQuestionsAsked(totalQuestionsAsked + 1); // localStorage에 저장\n//   //       }\n//   //     }\n//   //     setIsProcessing(false);\n//   //   } catch (error) {\n//   //     setIsLoading(false);\n//   //     setIsProcessing(false);\n//   //     console.error(error);\n//   //   }\n//   // };\n\n//   function openModal() {\n//     setModalIsOpen(true);\n//   }\n\n//   function closeModal() {\n//     setModalIsOpen(false);\n//   }\n\n//   function openHintModal() {\n//     setHintModalIsOpen(true);\n//   }\n\n//   function closeHintModal() {\n//     setHintModalIsOpen(false);\n//   }\n\n//   return (\n//     <motion.div\n//       initial={{ opacity: 0 }}\n//       animate={{ opacity: 1 }}\n//       exit={{ opacity: 0 }}\n//     >\n//       <div className=\"container\">\n//         <div className=\"all\">\n//           <div className=\"e218_192\">\n//             <div className=\"question_box\">\n//               <span className=\"Question\">{question}</span>\n//             </div>\n//             {author && <span className=\"source\">{`출처 : ${author}`}</span>}\n//             <div className=\"circle_check_box\">\n//               <div\n//                 className=\"quesiton_check_box\"\n//                 onClick={handleQuesionCheckcclick}\n//               >\n//                 <div\n//                   className={`circle ${!tabPressed ? \"checked\" : \"unchecked\"}`}\n//                 ></div>\n//                 {\" 질문\"}\n//               </div>\n//               <div\n//                 className=\"result_check_box\"\n//                 onClick={handleAnswerCheckcclick}\n//               >\n//                 <div\n//                   className={`circle ${tabPressed ? \"checked\" : \"unchecked\"}`}\n//                 ></div>\n//                 {\" 정답\"}\n//               </div>\n//               <button className=\"hint_button_box\" onClick={openHintModal}>\n//                 힌트 보기\n//               </button>\n//               <Modal\n//                 isOpen={hintmodalIsOpen}\n//                 onRequestClose={closeHintModal}\n//                 overlayClassName=\"ModalOverlay\"\n//                 className=\"ModalContent\"\n//                 contentLabel=\"포기 확인\"\n//               >\n//                 <div className=\"hint-button-container\">\n//                   <button\n//                     className=\"hint_button\"\n//                     onClick={() => setHintText(hint)}\n//                   >\n//                     {hintText}\n//                   </button>\n//                   <button\n//                     className=\"hint_button\"\n//                     onClick={() => setHintText2(hint2)}\n//                   >\n//                     {hintText2}\n//                   </button>\n//                   <button\n//                     className=\"hint_button_close\"\n//                     onClick={closeHintModal}\n//                   >\n//                     {\" \"}\n//                     닫기{\" \"}\n//                   </button>\n//                 </div>\n//               </Modal>\n//             </div>\n//             <p className=\"qeustion_text\">{text_question}</p>\n\n//             <div className=\"qeustion_text_box\">\n//               {question_step && (\n//                 <span className=\"textbox_step\">{question_2step_text}</span>\n//               )}\n\n//               <input\n//                 className={`textbox ${shake ? \"shake\" : \"\"}`}\n//                 value={text}\n//                 onChange={handleChange}\n//                 onKeyDown={handleKeyPress}\n//                 placeholder={\n//                   !tabPressed\n//                     ? question_step\n//                       ? \"긍정문 질문을 입력하세요.\"\n//                       : `ex) ${main_character}`\n//                     : \"정답을 입력해주세요.\"\n//                 }\n//               />\n//             </div>\n\n//             <button\n//               className={`send_button ${tabPressed ? \"tabPressed\" : \"\"}`}\n//               onClick={handleSendClick}\n//             >\n//               <img\n//                 className=\"SendButton\"\n//                 src={SendButton}\n//                 alt=\"SendButton\"\n//                 width=\"15\"\n//                 height=\"18\"\n//               />\n//             </button>\n\n//             {qnas.map((qna, index) => (\n//               // <div className=\"QAresponse\" key={index}>\n//               //   <QnA\n//               //     question={qna.question}\n//               //     aiQuestion={qna.aiQuestion}\n//               //     index={index}\n//               //     answer={qna.answer}\n//               //     borderStrength={index === 0 ? \"2px\" : \"0px\"}\n//               //     borderBottomStrength={\n//               //       index === qnas.length - 1 ? \"0.01px\" : \"0px\"\n//               //     }\n//               //   />\n//               // </div>\n//               <div className=\"QAresponse\" key={index}>\n//                 <QnA\n//                   question={qna.question}\n//                   answer={\n//                     isLoading && qna.question === text ? (\n//                       <span className=\"loading\">Loading</span>\n//                     ) : (\n//                       qna.answer\n//                     )\n//                   }\n//                   borderStrength={index === 0 ? \"2px\" : \"0px\"}\n//                   borderBottomStrength={\n//                     index === qnas.length - 1 ? \"0.01px\" : \"0px\"\n//                   }\n//                 />\n//               </div>\n//             ))}\n//             <div>\n//               <button className=\"giveup_button\" onClick={openModal}>\n//                 포기하기\n//               </button>\n\n//               <Modal\n//                 isOpen={modalIsOpen}\n//                 onRequestClose={closeModal}\n//                 overlayClassName=\"ModalOverlay\"\n//                 className=\"ModalContent\"\n//                 contentLabel=\"포기 확인\"\n//               >\n//                 <h2>정말로 포기를 하시겠습니까?</h2>\n//                 <div className=\"button-container\">\n//                   <button onClick={closeModal}>취소</button>\n//                   <button onClick={handleGiveUpClick}>확인</button>\n//                 </div>\n//               </Modal>\n//             </div>\n//           </div>\n\n//           <div className=\"border_line\">\n//             <div>\n//               <p className=\"nickname\">{nickname} 님</p>\n//             </div>\n//             <div>\n//               <img\n//                 className=\"profile_photo\"\n//                 src={Profile}\n//                 alt=\"Profile\"\n//                 width=\"25\"\n//                 height=\"25\"\n//               />\n//             </div>\n//           </div>\n\n//           <img\n//             className=\"F22F\"\n//             src={F22FBeta}\n//             alt=\"F22FBeta\"\n//             onClick={handleLogoClick}\n//           />\n//           <div className=\"e168_70\">\n//             <span className=\"description\">\n//               텍스트 입력 칸에 추측한 내용을 적으면 ‘네’ 또는 ‘아니오’ 형식의\n//               답을 받을 수 있습니다.\n//             </span>\n//             <span className=\"description_2\">\n//               Tab 키를 눌러 바다거북수프의 정답을 맞혀보세요.\n//             </span>\n//           </div>\n//           <div>\n//             <ScrollToTopButton className=\"scroll_to_top\" />\n//           </div>\n//         </div>\n//       </div>\n//     </motion.div>\n//   );\n// }","map":{"version":3,"names":["React","useState","useEffect","axios","QnA","F22FBeta","useNavigate","Profile","SendButton","Loading","motion","Modal","ScrollToTopButton"],"sources":["/app/src/page/problem/page.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport QnA from \"../../component/qna\";\nimport \"./page.css\";\nimport F22FBeta from \"../../images/F22FBeta.png\";\nimport { useNavigate } from \"react-router-dom\";\nimport Profile from \"../../images/Profile.png\";\nimport SendButton from \"../../images/SendButton.png\";\nimport Loading from \"../../component/loading\";\nimport { motion } from \"framer-motion\";\nimport Modal from \"react-modal\";\nimport ScrollToTopButton from \"../../component/scrollbutton\";\n\n// export default function Problem() {\n//   const [text, setText] = useState(\"\");\n//   const [qnas, setQnas] = useState([]);\n//   const [question, setQuestion] = useState(\"\");\n//   const navigate = useNavigate();\n//   const [shake, setShake] = useState(false);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [gameAttempts, setGameAttempts] = useState(0);\n//   const [correctAnswers, setCorrectAnswers] = useState(0);\n//   const [giveUpCount, setGiveUpCount] = useState(0);\n//   const [totalQuestionsAsked, setTotalQuestionsAsked] = useState(0);\n//   const [updateState, setUpdateState] = useState(false);\n//   const [tabPressed, setTabPressed] = useState(false);\n//   const [isProcessing, setIsProcessing] = useState(false);\n//   const [nickname, setNickname] = useState(\"\");\n//   const [modalIsOpen, setModalIsOpen] = useState(false);\n//   const [hintmodalIsOpen, setHintModalIsOpen] = useState(false);\n//   const [text_t, setText_t] = useState(\"\");\n//   const [author, setAuthor] = useState(\"\");\n//   const [main_character, setMainCharacter] = useState(\"\");\n//   const [text_question, setText_Question] = useState(\n//     \"어떤 대상에 대해 알고 싶으신가요?\"\n//   );\n//   const [question_step, setQuestion_Step] = useState(false);\n//   const [givup, setGiveUp] = useState(false);\n//   const [question_2step_text, setQuestion_2step_Text] = useState(\"\");\n//   const [hintText, setHintText] = useState(\"1단계 힌트\");\n//   const [hintText2, setHintText2] = useState(\"2단계 힌트\");\n//   const [hint, setHint] = useState(\"없음\");\n//   const [hint2, setHint2] = useState(\"없음\");\n\n//   useEffect(() => {\n//     const now = new Date();\n//     const currentDate = `${now.getFullYear()}-${\n//       now.getMonth() + 1\n//     }-${now.getDate()}`;\n//     let lastTime = localStorage.getItem(\"startTime\");\n//     if (lastTime) {\n//       lastTime = new Date(lastTime);\n//       const lastDate = `${lastTime.getFullYear()}-${\n//         lastTime.getMonth() + 1\n//       }-${lastTime.getDate()}`;\n//       if (lastDate !== currentDate) {\n//         localStorage.setItem(\"startTime\", now);\n//         localStorage.setItem(\"endTime\", \"\");\n//       }\n//     } else {\n//       localStorage.setItem(\"startTime\", now);\n//       localStorage.setItem(\"endTime\", \"\");\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     const savedNickname = localStorage.getItem(\"nickname\");\n//     if (savedNickname) {\n//       setNickname(savedNickname);\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     // 현재 날짜를 구한다\n//     const now = new Date();\n//     const currentDate = `${now.getFullYear()}-${\n//       now.getMonth() + 1\n//     }-${now.getDate()}`;\n\n//     // 이전에 저장한 날짜를 불러온다\n//     const savedDate = localStorage.getItem(\"date\");\n//     const savedGameAttempts = Number(localStorage.getItem(\"gameAttempts\"));\n//     const savedCorrectAnswers = Number(localStorage.getItem(\"correctAnswers\"));\n\n//     const savedGiveUpCount = Number(localStorage.getItem(\"giveUpCount\"));\n//     const savedTotalQuestionsAsked = Number(\n//       localStorage.getItem(\"totalQuestionsAsked\")\n//     );\n\n//     // 날짜가 다르면 모든 값을 초기화한다\n//     if (savedDate !== currentDate) {\n//       setGameAttempts(savedGameAttempts + 1);\n//       setTotalQuestionsAsked(0);\n//       // localStorage.setItem(\"date\", currentDate);\n//     } else {\n//       // 같은 날이면 localStorage에 저장된 값을 불러온다\n//       setGameAttempts(savedGameAttempts || 1);\n//       setTotalQuestionsAsked(savedTotalQuestionsAsked || 0);\n//     }\n\n//     setCorrectAnswers(savedCorrectAnswers);\n\n//     setGiveUpCount(savedGiveUpCount || 0);\n//   }, []);\n\n//   // 값들이 변경될 때마다 localStorage에 저장한다\n//   useEffect(() => {\n//     localStorage.setItem(\"gameAttempts\", gameAttempts);\n//     localStorage.setItem(\"giveUpCount\", giveUpCount);\n//     localStorage.setItem(\"correctAnswers\", correctAnswers);\n//     localStorage.setItem(\"totalQuestionsAsked\", totalQuestionsAsked);\n//   }, [gameAttempts, correctAnswers, giveUpCount, totalQuestionsAsked]);\n\n//   const saveQnas = (qnas) => {\n//     localStorage.setItem(\"qnas\", JSON.stringify(qnas));\n//   };\n\n//   useEffect(() => {\n//     const savedQnas = JSON.parse(localStorage.getItem(\"qnas\"));\n//     const savedDate = localStorage.getItem(\"date\");\n\n//     const now = new Date();\n//     const currentDate = `${now.getFullYear()}-${\n//       now.getMonth() + 1\n//     }-${now.getDate()}`;\n\n//     if (savedQnas && savedDate === currentDate) {\n//       setQnas(savedQnas);\n//     } else {\n//       localStorage.removeItem(\"qnas\");\n//       localStorage.setItem(\"date\", currentDate);\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     if (updateState) {\n//       if (givup) {\n//         navigate(\"/explanation\", { state: { userAnswer: \"\" } });\n//         setUpdateState(false);\n//       } else {\n//         navigate(\"/explanation\", { state: { userAnswer: text_t } });\n//         // 상태 업데이트 완료 표시\n//         setUpdateState(false);\n//       }\n//     }\n//   }, [updateState, text]);\n\n//   useEffect(() => {\n//     axios\n//       .get(process.env.REACT_APP_API_URL + \"/getQuestion/\")\n//       .then((response) => {\n//         const data = response.data;\n//         setQuestion(data.question);\n//         setAuthor(data.author);\n//         setMainCharacter(data.main_character);\n//         setHint(\n//           data.hints && data.hints.length > 0 ? data.hints[0].hint : null\n//         );\n//         setHint2(\n//           data.hints && data.hints.length > 1 ? data.hints[1].hint : null\n//         );\n//       })\n//       .catch((error) => {\n//         console.error(\"There was an error!\", error);\n//       });\n//   }, []);\n\n//   useEffect(() => {\n//     if (tabPressed) {\n//       setText_Question(\"정답을 말해주세요.\");\n//     } else {\n//       if (question_step) {\n//         setText_Question(\"질문을 완성해주세요.\");\n//       } else {\n//         setText_Question(\"어떤 대상에 대해 알고 싶으신가요?\");\n//       }\n//     }\n//   }, [tabPressed, question_step]);\n\n//   const handleChange = (e) => {\n//     setText(e.target.value);\n//   };\n//   const handleQuesionCheckcclick = (asnync) => {\n//     setTabPressed(false);\n//     setQuestion_Step(false);\n//   };\n//   const handleAnswerCheckcclick = (asnync) => {\n//     setTabPressed(true);\n//     setQuestion_Step(false);\n//   };\n\n//   const handleLogoClick = async () => {\n//     navigate(\"/\");\n//   };\n\n//   const handleKeyPress = (e) => {\n//     if (e.key === \"Enter\") {\n//       e.preventDefault();\n//       handleSendClick();\n//     }\n//     if (e.key === \"Tab\") {\n//       e.preventDefault();\n//       setTabPressed(!tabPressed);\n//       setQuestion_Step(false);\n//     }\n//     if (e.key === \"Escape\") {\n//       setQuestion_Step(false);\n//     }\n//   };\n\n//   const handleGiveUpClick = async () => {\n//     closeModal();\n//     const lastGiveUpDate = localStorage.getItem(\"lastGiveUpDate\");\n//     const lastCorrectDate = localStorage.getItem(\"lastCorrectDate\");\n//     const now = new Date();\n//     const currentDate = `${now.getFullYear()}-${\n//       now.getMonth() + 1\n//     }-${now.getDate()}`;\n//     localStorage.setItem(\"endTime\", now);\n//     // 마지막으로 정답을 맞춘 날짜와 현재 날짜를 비교하기\n//     if (lastGiveUpDate !== currentDate && lastCorrectDate !== currentDate) {\n//       // 현재 날짜를 마지막으로 정답을 맞춘 날짜로 저장\n\n//       localStorage.setItem(\"lastGiveUpDate\", currentDate);\n\n//       // 실패 횟수를 증가\n//       setGiveUpCount(giveUpCount + 1);\n//     }\n//     setGiveUp(true);\n//     setUpdateState(true);\n//   };\n\n//   const handleSendClick = async () => {\n//     if (isProcessing) return;\n//     // 실행 중이 아니라면, 실행 중임을 표시\n//     setIsProcessing(true);\n//     try {\n//       setText_t(text);\n//       const text_x = text;\n//       setTimeout(() => setText(\"\"), 0);\n//       // console.log(process.env.REACT_APP_API_URL + \"/submit/\");\n//       if (tabPressed === true) {\n//         // 텍스트가 '정답'으로 시작하면 다른 주소로 요청\n//         if (text_x.length <= 5) {\n//           setShake(true); // 실패 시 shake 상태를 true로 변경\n//           console.log(\"aaa\");\n//           const newQnas = [\n//             {\n//               question: text_x,\n//               aiQuestion: \"\",\n//               answer: \"ㅁㄴㅇㅁㅇ\",\n//             },\n//             ...qnas,\n//           ];\n//           setQnas(newQnas);\n//           saveQnas(newQnas);\n//           setTotalQuestionsAsked(totalQuestionsAsked + 1);\n//           setTimeout(() => setShake(false), 500);\n//         } else {\n//           console.log(\"bbb\");\n//           const anotherResponse = await axios.post(\n//             process.env.REACT_APP_API_URL + \"/submit/\",\n//             {\n//               data: text_x,\n//             }\n//           );\n//           console.log(anotherResponse.data.response);\n//           if (\n//             anotherResponse.data.response.startsWith(\"네\") ||\n//             anotherResponse.data.response.startsWith(\"예\") ||\n//             anotherResponse.data.response.startsWith(\"맞습니다\") ||\n//             anotherResponse.data.response.startsWith(\"Yes\")\n//           ) {\n//             const now = new Date();\n//             const currentDate = `${now.getFullYear()}-${\n//               now.getMonth() + 1\n//             }-${now.getDate()}`;\n\n//             localStorage.setItem(\"endTime\", now);\n//             // 마지막으로 정답을 맞춘 날짜를 불러오기\n//             const lastCorrectDate = localStorage.getItem(\"lastCorrectDate\");\n//             const lastGiveUpDate = localStorage.getItem(\"lastGiveUpDate\");\n\n//             // 마지막으로 정답을 맞춘 날짜와 현재 날짜를 비교하기\n//             if (\n//               lastGiveUpDate !== currentDate &&\n//               lastCorrectDate !== currentDate\n//             ) {\n//               // 현재 날짜를 마지막으로 정답을 맞춘 날짜로 저장\n//               localStorage.setItem(\"lastCorrectDate\", currentDate);\n\n//               // 정답 횟수를 증가\n//               setCorrectAnswers((prev) => prev + 1);\n\n//               // setUpdateState(true);\n//             }\n//             setUpdateState(true);\n//           } else {\n//             setShake(true); // 실패 시 shake 상태를 true로 변경\n//             const newQnas = [\n//               { question: text_x, aiQuestion: \"\", answer: \"정답이 아닙니다.\" },\n//               ...qnas,\n//             ];\n//             setQnas(newQnas);\n//             saveQnas(newQnas);\n//             setTotalQuestionsAsked(totalQuestionsAsked + 1);\n//             setTimeout(() => setShake(false), 500);\n//           }\n//         }\n//       } else {\n//         if (!question_step) {\n//           setQuestion_Step(true);\n//           setText_t(text);\n//           setTimeout(() => setText(\"\"), 0);\n//           const response = await axios.post(\n//             process.env.REACT_APP_API_URL + \"/getJosa/\",\n//             {\n//               data: text_x,\n//             }\n//           );\n//           setQuestion_2step_Text(response.data.response);\n//         } else {\n//           setQuestion_Step(false);\n//           const tempQnas = [\n//             {\n//               question: question_2step_text + \" \" + text_x,\n//               answer: <Loading />,\n//             },\n//             ...qnas,\n//           ];\n//           setQnas(tempQnas); // 임시로 Loading 애니메이션을 표시\n\n//           const response = await axios.post(\n//             process.env.REACT_APP_API_URL + \"/question/\",\n//             {\n//               data: question_2step_text + \" \" + text_x + \"?\",\n//             }\n//           );\n\n//           let updatedQnas;\n//           if (response.data.response.startsWith(\"네\")) {\n//             // if (true) {\n//             updatedQnas = tempQnas.map((qna) =>\n//               qna.question === question_2step_text + \" \" + text_x &&\n//               qna.answer.type === Loading\n//                 ? {\n//                     question: question_2step_text + \" \" + text_x,\n//                     answer: response.data.response,\n//                   }\n//                 : qna\n//             );\n//           } else if (response.data.response.startsWith(\"아니오\")) {\n//             updatedQnas = tempQnas.map((qna) =>\n//               qna.question === question_2step_text + \" \" + text_x &&\n//               qna.answer.type === Loading\n//                 ? {\n//                     question: question_2step_text + \" \" + text_x,\n//                     answer: \"아니오.\",\n//                   }\n//                 : qna\n//             );\n//           } else {\n//             updatedQnas = tempQnas.map((qna) =>\n//               qna.question === question_2step_text + \" \" + text_x &&\n//               qna.answer.type === Loading\n//                 ? {\n//                     question: question_2step_text + \" \" + text_x,\n//                     answer: \"중요하지 않은 내용입니다.\",\n//                   }\n//                 : qna\n//             );\n//           }\n//           setQnas(updatedQnas); // 응답으로 교체\n//           saveQnas(updatedQnas);\n//           setTotalQuestionsAsked(totalQuestionsAsked + 1); // localStorage에 저장\n//         }\n//       }\n//       setIsProcessing(false);\n//     } catch (error) {\n//       setIsLoading(false);\n//       setIsProcessing(false);\n//       console.error(error);\n//     }\n//   };\n//   //       } else {\n//   //         console.log(\"adsasd\");\n//   //         setQuestion_Step(false);\n//   //         const tempQnas = [\n//   //           {\n//   //             question: question_2step_text + \" \" + text_x,\n//   //             aiQuestion: <Loading />,\n//   //             answer: <Loading />,\n//   //           },\n//   //           ...qnas,\n//   //         ];\n//   //         setQnas(tempQnas); // 임시로 Loading 애니메이션을 표시\n//   //         console.log(\"adsasd1\");\n//   //         const response = await axios.post(\n//   //           process.env.REACT_APP_API_URL + \"/question/\",\n//   //           {\n//   //             data: question_2step_text + \" \" + text_x,\n//   //           }\n//   //         );\n\n//   //         let updatedQnas;\n//   //         console.log(response.data.response);\n//   //         console.log(response.data.ai_question);\n//   //         let responseString = JSON.stringify(response.data.response);\n//   //         if (\n//   //           responseString.includes(\"Yes\") ||\n//   //           responseString.includes(\"yes\")\n//   //         ) {\n//   //           // if (true) {\n//   //           updatedQnas = tempQnas.map((qna) =>\n//   //             qna.question === question_2step_text + \" \" + text_x &&\n//   //             qna.aiQuestion.type === Loading &&\n//   //             qna.answer.type === Loading\n//   //               ? {\n//   //                   question: question_2step_text + \" \" + text_x,\n//   //                   aiQuestion: response.data.ai_question,\n//   //                   answer: \"네.\",\n//   //                 }\n//   //               : qna\n//   //           );\n//   //         } else if (\n//   //           responseString.includes(\"No\") ||\n//   //           responseString.includes(\"no\")\n//   //         ) {\n//   //           updatedQnas = tempQnas.map((qna) =>\n//   //             qna.question === question_2step_text + \" \" + text_x &&\n//   //             qna.aiQuestion.type === Loading &&\n//   //             qna.answer.type === Loading\n//   //               ? {\n//   //                   question: question_2step_text + \" \" + text_x,\n//   //                   aiQuestion: response.data.ai_question,\n//   //                   answer: \"아니오.\",\n//   //                 }\n//   //               : qna\n//   //           );\n//   //         } else if (\n//   //           responseString.includes(\"Probably not\") ||\n//   //           responseString.includes(\"Probably not.\")\n//   //         ) {\n//   //           updatedQnas = tempQnas.map((qna) =>\n//   //             qna.question === question_2step_text + \" \" + text_x &&\n//   //             qna.aiQuestion.type === Loading &&\n//   //             qna.answer.type === Loading\n//   //               ? {\n//   //                   question: question_2step_text + \" \" + text_x,\n//   //                   aiQuestion: response.data.ai_question,\n//   //                   answer: \"아마도 맞을 겁니다.\",\n//   //                 }\n//   //               : qna\n//   //           );\n//   //         } else if (\n//   //           responseString.includes(\"Probably.\") ||\n//   //           responseString.includes(\"Probably\")\n//   //         ) {\n//   //           updatedQnas = tempQnas.map((qna) =>\n//   //             qna.question === question_2step_text + \" \" + text_x &&\n//   //             qna.aiQuestion.type === Loading &&\n//   //             qna.answer.type === Loading\n//   //               ? {\n//   //                   question: question_2step_text + \" \" + text_x,\n//   //                   aiQuestion: response.data.ai_question,\n//   //                   answer: \"아마도 아닐 겁니다.\",\n//   //                 }\n//   //               : qna\n//   //           );\n//   //         } else {\n//   //           updatedQnas = tempQnas.map((qna) =>\n//   //             qna.question === question_2step_text + \" \" + text_x &&\n//   //             qna.aiQuestion.type === Loading &&\n//   //             qna.answer.type === Loading\n//   //               ? {\n//   //                   question: question_2step_text + \" \" + text_x,\n//   //                   aiQuestion: response.data.ai_question,\n//   //                   answer: \"필요없는 정보입니다.\",\n//   //                 }\n//   //               : qna\n//   //           );\n//   //         }\n//   //         setQnas(updatedQnas); // 응답으로 교체\n//   //         saveQnas(updatedQnas);\n//   //         setTotalQuestionsAsked(totalQuestionsAsked + 1); // localStorage에 저장\n//   //       }\n//   //     }\n//   //     setIsProcessing(false);\n//   //   } catch (error) {\n//   //     setIsLoading(false);\n//   //     setIsProcessing(false);\n//   //     console.error(error);\n//   //   }\n//   // };\n\n//   function openModal() {\n//     setModalIsOpen(true);\n//   }\n\n//   function closeModal() {\n//     setModalIsOpen(false);\n//   }\n\n//   function openHintModal() {\n//     setHintModalIsOpen(true);\n//   }\n\n//   function closeHintModal() {\n//     setHintModalIsOpen(false);\n//   }\n\n//   return (\n//     <motion.div\n//       initial={{ opacity: 0 }}\n//       animate={{ opacity: 1 }}\n//       exit={{ opacity: 0 }}\n//     >\n//       <div className=\"container\">\n//         <div className=\"all\">\n//           <div className=\"e218_192\">\n//             <div className=\"question_box\">\n//               <span className=\"Question\">{question}</span>\n//             </div>\n//             {author && <span className=\"source\">{`출처 : ${author}`}</span>}\n//             <div className=\"circle_check_box\">\n//               <div\n//                 className=\"quesiton_check_box\"\n//                 onClick={handleQuesionCheckcclick}\n//               >\n//                 <div\n//                   className={`circle ${!tabPressed ? \"checked\" : \"unchecked\"}`}\n//                 ></div>\n//                 {\" 질문\"}\n//               </div>\n//               <div\n//                 className=\"result_check_box\"\n//                 onClick={handleAnswerCheckcclick}\n//               >\n//                 <div\n//                   className={`circle ${tabPressed ? \"checked\" : \"unchecked\"}`}\n//                 ></div>\n//                 {\" 정답\"}\n//               </div>\n//               <button className=\"hint_button_box\" onClick={openHintModal}>\n//                 힌트 보기\n//               </button>\n//               <Modal\n//                 isOpen={hintmodalIsOpen}\n//                 onRequestClose={closeHintModal}\n//                 overlayClassName=\"ModalOverlay\"\n//                 className=\"ModalContent\"\n//                 contentLabel=\"포기 확인\"\n//               >\n//                 <div className=\"hint-button-container\">\n//                   <button\n//                     className=\"hint_button\"\n//                     onClick={() => setHintText(hint)}\n//                   >\n//                     {hintText}\n//                   </button>\n//                   <button\n//                     className=\"hint_button\"\n//                     onClick={() => setHintText2(hint2)}\n//                   >\n//                     {hintText2}\n//                   </button>\n//                   <button\n//                     className=\"hint_button_close\"\n//                     onClick={closeHintModal}\n//                   >\n//                     {\" \"}\n//                     닫기{\" \"}\n//                   </button>\n//                 </div>\n//               </Modal>\n//             </div>\n//             <p className=\"qeustion_text\">{text_question}</p>\n\n//             <div className=\"qeustion_text_box\">\n//               {question_step && (\n//                 <span className=\"textbox_step\">{question_2step_text}</span>\n//               )}\n\n//               <input\n//                 className={`textbox ${shake ? \"shake\" : \"\"}`}\n//                 value={text}\n//                 onChange={handleChange}\n//                 onKeyDown={handleKeyPress}\n//                 placeholder={\n//                   !tabPressed\n//                     ? question_step\n//                       ? \"긍정문 질문을 입력하세요.\"\n//                       : `ex) ${main_character}`\n//                     : \"정답을 입력해주세요.\"\n//                 }\n//               />\n//             </div>\n\n//             <button\n//               className={`send_button ${tabPressed ? \"tabPressed\" : \"\"}`}\n//               onClick={handleSendClick}\n//             >\n//               <img\n//                 className=\"SendButton\"\n//                 src={SendButton}\n//                 alt=\"SendButton\"\n//                 width=\"15\"\n//                 height=\"18\"\n//               />\n//             </button>\n\n//             {qnas.map((qna, index) => (\n//               // <div className=\"QAresponse\" key={index}>\n//               //   <QnA\n//               //     question={qna.question}\n//               //     aiQuestion={qna.aiQuestion}\n//               //     index={index}\n//               //     answer={qna.answer}\n//               //     borderStrength={index === 0 ? \"2px\" : \"0px\"}\n//               //     borderBottomStrength={\n//               //       index === qnas.length - 1 ? \"0.01px\" : \"0px\"\n//               //     }\n//               //   />\n//               // </div>\n//               <div className=\"QAresponse\" key={index}>\n//                 <QnA\n//                   question={qna.question}\n//                   answer={\n//                     isLoading && qna.question === text ? (\n//                       <span className=\"loading\">Loading</span>\n//                     ) : (\n//                       qna.answer\n//                     )\n//                   }\n//                   borderStrength={index === 0 ? \"2px\" : \"0px\"}\n//                   borderBottomStrength={\n//                     index === qnas.length - 1 ? \"0.01px\" : \"0px\"\n//                   }\n//                 />\n//               </div>\n//             ))}\n//             <div>\n//               <button className=\"giveup_button\" onClick={openModal}>\n//                 포기하기\n//               </button>\n\n//               <Modal\n//                 isOpen={modalIsOpen}\n//                 onRequestClose={closeModal}\n//                 overlayClassName=\"ModalOverlay\"\n//                 className=\"ModalContent\"\n//                 contentLabel=\"포기 확인\"\n//               >\n//                 <h2>정말로 포기를 하시겠습니까?</h2>\n//                 <div className=\"button-container\">\n//                   <button onClick={closeModal}>취소</button>\n//                   <button onClick={handleGiveUpClick}>확인</button>\n//                 </div>\n//               </Modal>\n//             </div>\n//           </div>\n\n//           <div className=\"border_line\">\n//             <div>\n//               <p className=\"nickname\">{nickname} 님</p>\n//             </div>\n//             <div>\n//               <img\n//                 className=\"profile_photo\"\n//                 src={Profile}\n//                 alt=\"Profile\"\n//                 width=\"25\"\n//                 height=\"25\"\n//               />\n//             </div>\n//           </div>\n\n//           <img\n//             className=\"F22F\"\n//             src={F22FBeta}\n//             alt=\"F22FBeta\"\n//             onClick={handleLogoClick}\n//           />\n//           <div className=\"e168_70\">\n//             <span className=\"description\">\n//               텍스트 입력 칸에 추측한 내용을 적으면 ‘네’ 또는 ‘아니오’ 형식의\n//               답을 받을 수 있습니다.\n//             </span>\n//             <span className=\"description_2\">\n//               Tab 키를 눌러 바다거북수프의 정답을 맞혀보세요.\n//             </span>\n//           </div>\n//           <div>\n//             <ScrollToTopButton className=\"scroll_to_top\" />\n//           </div>\n//         </div>\n//       </div>\n//     </motion.div>\n//   );\n// }\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,GAAG,MAAM,qBAAqB;AACrC,OAAO,YAAY;AACnB,OAAOC,QAAQ,MAAM,2BAA2B;AAChD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,OAAO,MAAM,0BAA0B;AAC9C,OAAOC,UAAU,MAAM,6BAA6B;AACpD,OAAOC,OAAO,MAAM,yBAAyB;AAC7C,SAASC,MAAM,QAAQ,eAAe;AACtC,OAAOC,KAAK,MAAM,aAAa;AAC/B,OAAOC,iBAAiB,MAAM,8BAA8B;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}