[{"/app/src/index.js":"1","/app/src/reportWebVitals.js":"2","/app/src/App.js":"3","/app/src/page/home/page.js":"4","/app/src/page/thanks/page.js":"5","/app/src/page/problem/page.js":"6","/app/src/component/qna.js":"7","/app/src/component/loading.js":"8","/app/src/component/scrollbutton.js":"9"},{"size":869,"mtime":1688803398139,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":1687682060000,"results":"12","hashOfConfig":"11"},{"size":528,"mtime":1687682060000,"results":"13","hashOfConfig":"11"},{"size":10459,"mtime":1689593582403,"results":"14","hashOfConfig":"11"},{"size":12435,"mtime":1689593739871,"results":"15","hashOfConfig":"11"},{"size":17177,"mtime":1689594502122,"results":"16","hashOfConfig":"11"},{"size":1769,"mtime":1688286434000,"results":"17","hashOfConfig":"11"},{"size":188,"mtime":1688004607000,"results":"18","hashOfConfig":"11"},{"size":846,"mtime":1688122435000,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"24"},"17z7135",{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"24"},"/app/src/index.js",["52"],[],"import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\nimport Home from \"./page/home/page\";\nimport Thanks from \"./page/thanks/page\";\nimport Problem from \"./page/problem/page\";\nimport { AnimatePresence } from \"framer-motion\"; // 이 부분을 import 해주세요.\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <Router>\n    <AnimatePresence>\n      {\" \"}\n      {/* 이 부분에 추가했습니다. */}\n      <Routes>\n        <Route path=\"/\" element={<Home />} />\n        <Route path=\"/explanation\" element={<Thanks />} />\n        <Route path=\"/issue\" element={<Problem />} />\n      </Routes>\n    </AnimatePresence>\n  </Router>\n);\n\nreportWebVitals();\n",[],"/app/src/reportWebVitals.js",[],[],"/app/src/App.js",[],[],"/app/src/page/home/page.js",["53"],[],"import { Link } from \"react-router-dom\";\nimport \"./page.css\";\nimport Profile from \"../../images/Profile.png\";\nimport F22FBeta from \"../../images/F22FBeta.png\";\nimport { useNavigate } from \"react-router-dom\";\nimport { motion } from \"framer-motion\";\nimport ScrollToTopButton from \"../../component/scrollbutton\";\nimport React, { useState, useEffect } from \"react\";\n\nexport default function Home() {\n  const [nickname, setNickname] = useState(\n    localStorage.getItem(\"nickname\") || \"\"\n  );\n  const [isAnimating, setIsAnimating] = useState(false);\n  const navigate = useNavigate();\n  const handleChange = (event) => {\n    setNickname(event.target.value);\n  };\n  const handleLogoClick = async () => {\n    navigate(\"/\");\n  };\n\n  const handleKeyPress = (event) => {\n    if (event.key === \"Enter\") {\n      setIsAnimating(true);\n      setTimeout(() => setIsAnimating(false), 900);\n      localStorage.setItem(\"nickname\", nickname); // The animation lasts 900ms\n    }\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      exit={{ opacity: 0 }}\n    >\n      <div className=\"container\">\n        <div className=\"e4_2\">\n          <div className=\"e6_15\">\n            <span className=\"e6_16\">My Soup Recipe</span>\n            <span className=\"e6_17\">AI 기반 바다거북수프 공장</span>\n          </div>\n          <div className=\"e6_18\">\n            <div className=\"start_button\"></div>\n            <Link\n              to=\"/issue\"\n              className=\"e6_20\"\n              style={{ textDecoration: \"none\" }}\n            >\n              시작하기 ✨{\" \"}\n            </Link>\n          </div>\n          <div className=\"e19_10\">\n            <div className=\"computer_top\"></div>\n            <div className=\"e6_24\"></div>\n\n            <div className=\"e6_28\"></div>\n            <div className=\"e6_25\"></div>\n            <div className=\"e6_26\"></div>\n            <div className=\"e6_27\"></div>\n            <div className=\"e12_16\">\n              <div className=\"my_chat_box\"></div>\n              <span className=\"my_chat\">바닷가 레스토랑인게 중요합니까?</span>\n            </div>\n            <div className=\"e6_30\">\n              <div className=\"AI_chat_box_2\"></div>\n              <span className=\"AI_chat_2\">\n                네. 그 남자의 과거와 관련있습니다.\n              </span>\n            </div>\n            <div className=\"e12_26\">\n              <div className=\"AI_chat_box\"></div>\n              <span className=\"AI_chat\">네. 조금은 관계 있습니다.</span>\n            </div>\n            <div className=\"e6_29\">\n              <div className=\"my_chat_box_2\"></div>\n              <span className=\"my_chat\">\n                수프가 남자의 과거와 관련이 있나요?{\" \"}\n              </span>\n            </div>\n          </div>\n          <img\n            className=\"F22F_main\"\n            src={F22FBeta}\n            alt=\"F22FBeta\"\n            onClick={handleLogoClick}\n          />\n          <div className=\"e204_184\">\n            <div className=\"e186_126\"></div>\n            <div className=\"checkmakr_box\">\n              <div\n                className={`checkmark ${isAnimating ? \"animate\" : \"\"}`}\n              ></div>\n            </div>\n            <div className=\"nickname_profile_main\">\n              <div className=\"e186_114\">\n                <img\n                  className=\"profile_photo_main\"\n                  src={Profile}\n                  alt=\"Profile\"\n                  width=\"30\"\n                  height=\"30\"\n                />\n              </div>\n              <input\n                type=\"text\"\n                className=\"nickname_main\"\n                value={nickname}\n                onChange={handleChange}\n                onKeyDown={handleKeyPress}\n                placeholder=\"닉네임을 입력하세요.\"\n              />\n            </div>\n          </div>\n          <div className=\"detail\">\n            <div className=\"e186_176\">\n              <span className=\"e186_177\">질문과 답변</span>\n            </div>\n            <div className=\"e186_174\" style={{ marginTop: \"40px\" }}>\n              <span className=\"e186_175\">Q. 마이수프레시피란 무엇인가요?</span>\n              <p className=\"A_dot\"> A.</p>\n              <span className=\"e186_178\">\n                마이수프레시피는 매일 한 개의 바다거북수프 문제를 선정하여\n                출제하는 곳입니다. 바다거북수프 문제란 보통 기묘한 내용을\n                바탕으로 만들어지는 추리게임입니다. 어떠한 상황을 제시하면 왜\n                그런 상황이 발생했는지 추리해서 정답을 맞히면 됩니다. 상상력을\n                총동원해서 오늘의 정답을 맞혀보세요!\n              </span>\n            </div>\n            <div className=\"e186_174\" style={{ marginTop: \"120px\" }}>\n              <span className=\"e186_175\">Q. 게임 방법은 무엇인가요?</span>\n              <p className=\"A_dot\"> A.</p>\n              <span className=\"e186_178\">\n                바다거북수프 문제가 출제되면, 유저들은 AI에게 예, 아니오로\n                대답할 수 있는 질문을 단계에 따라 입력합니다. 질문을 할 때는\n                문장의 끝에 <span className=\"bold-word\">‘?’</span>를 붙여주세요.\n                질문에 대한 답을 듣게 되면, 이를 바탕으로 이야기의 전말을\n                추리합니다. 이렇게 반복하여 문답을 진행한 뒤, 정답을 맞히고\n                싶다면 <span className=\"bold-word\">‘Tab 키’</span>를 눌러 정답을\n                작성하면 됩니다.\n              </span>\n            </div>\n            <div className=\"e186_174\" style={{ marginTop: \"120px\" }}>\n              <span className=\"e186_175\">\n                Q. 질문을 입력할 때, AI에게 대상과 행동을 따로 적어야 하는\n                이유가 무엇인가요?\n              </span>\n              <p className=\"A_dot\"> A.</p>\n              <span className=\"e186_178\">\n                대상과 행동을 각각 입력하면 AI가 받아들이는 문맥과 단어의\n                정확도가 상대적으로 높아집니다. 현재 Beta 버전에서는 질문에 대한\n                AI의 이해도를 높이기 위해 대상과 행동을 따로 입력하게끔 설정되어\n                있습니다. 이는 버전을 업데이트하면서 수정해나갈 계획이니 양해\n                부탁드립니다.\n              </span>\n              {/* <span className=\"e186_175\">\n              Q. AI가 어떻게 정답임을 인지하나요?\n            </span>\n            <p className=\"A_dot\"> A.</p>\n            <span className=\"e186_178\">\n              오늘의 정답에서 꼭 들어가야 할 핵심 키워드들을 몇 개씩\n              정해놓습니다. AI는 유저가 제출한 답과 키워드들의 문맥이 일치하는지\n              판단합니다. 유저가 어느 정도 정답과 가까운 내용을 작성하였다면\n              정답을 공개합니다.\n            </span> */}\n            </div>\n            <div className=\"e186_174\" style={{ marginTop: \"70px\" }}>\n              <span className=\"e186_175\">\n                Q. 마이수프레시피의 문제는 어떻게 정해지나요?\n              </span>\n              <p className=\"A_dot\"> A.</p>\n              <span className=\"e186_178\">\n                대상과 행동을 각각 입력하면 AI가 받아들이는 문맥과 단어의\n                정확도가 상대적으로 높아집니다. 현재 Beta 버전에서는 질문에 대한\n                AI의 이해도를 높이기 위해 대상과 행동을 따로 입력하게끔 설정되어\n                있습니다. 이는 버전을 업데이트하면서 수정해나갈 계획이니 양해\n                부탁드립니다.\n              </span>\n            </div>\n            <div className=\"e186_174\" style={{ marginTop: \"70px\" }}>\n              <span className=\"e186_175\">\n                Q. 하루에 한 번 이상 플레이할 수 없나요?\n              </span>\n              <p className=\"A_dot\"> A.</p>\n              <span className=\"e186_178\">\n                {\n                  \"마이수프레시피는 하루에 한 문제만 출제됩니다. 마이수프레시피는 \"\n                }\n                <a\n                  href=\"https://semantle-ko.newsjel.ly/\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  '꼬맨틀'\n                </a>\n                을 바탕으로 만들게 되었습니다. 우리의 목적은 꼬맨틀처럼\n                &quot;하루 한 번, 여러분의 일일퀘스트&quot;가 되는 것입니다.\n                문제는 국제 표준시(UTC) 기준 매일 오후 3시 또는 한국 표준시(KST)\n                기준 자정에 바뀝니다.\n              </span>\n            </div>\n            <div className=\"e186_174\" style={{ marginTop: \"70px\" }}>\n              <span className=\"e186_175\">\n                Q. 나만의 문제를 출제하는 방법은 무엇인가요?\n              </span>\n              <p className=\"A_dot\"> A.</p>\n              <span className=\"e186_178\">\n                나만의 문제는 ‘오늘의 문제’에 대한 해설 페이지 하단에서 출제할\n                수 있습니다. 해설 페이지는 오늘의 문제를 맞히거나 포기할 시 확인\n                가능합니다. 문제와 정답(해설)을 적으면, 추후 검토를 거쳐 유저의\n                닉네임과 함께 문제가 출제됩니다. 닉네임은 메인 화면의 우측\n                상단에서 설정할 수 있습니다.\n              </span>\n            </div>\n            <div className=\"e186_174\" style={{ marginTop: \"120px\" }}>\n              <span className=\"e186_175\">\n                Q. 다른 질문이나 피드백은 어떻게 보내나요?\n              </span>\n              <p className=\"A_dot\"> A.</p>\n              <span className=\"e186_178\">\n                질문이나 피드백은 F2__2F@naver.com로 문의해주세요!\n              </span>\n            </div>\n          </div>\n          <div className=\"footer\">\n            <p>Copyright 2023. F22F. All rights reserved.</p>\n          </div>\n        </div>\n        <ScrollToTopButton className=\"scroll_to_top\" />\n      </div>\n    </motion.div>\n  );\n}\n","/app/src/page/thanks/page.js",["54","55","56"],[],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./page.css\";\nimport { useLocation } from \"react-router-dom\";\nimport Profile from \"../../images/Profile.png\";\nimport F22FBeta from \"../../images/F22FBeta.png\";\nimport CopyButton from \"../../images/CopyButton.png\";\nimport SubmitButton from \"../../images/SubmitButton.png\";\nimport GreenTurtle from \"../../images/GreenTurtle.png\";\nimport BlueSpeechBubble from \"../../images/BlueSpeechBubble.png\";\nimport WhiteSpeechBubble from \"../../images/WhiteSpeechBubble.png\";\nimport WhiteTurtle from \"../../images/WhiteTurtle.png\";\nimport { useNavigate } from \"react-router-dom\";\nimport Modal from \"react-modal\";\n\nModal.setAppElement(\"#root\");\n\nexport default function Thanks() {\n  const location = useLocation();\n  const [story, setStory] = useState(\"\");\n  const [n, setN] = useState(0);\n  const [firstN, setFirstN] = useState(0);\n  const navigate = useNavigate();\n  const userAnswer = location.state?.userAnswer || \"\"; // state가 없는 경우를 대비해서 기본값을 제공합니다\n  const gameAttempts = Number(localStorage.getItem(\"gameAttempts\"));\n  const correctAnswers = Number(localStorage.getItem(\"correctAnswers\"));\n  const giveUpCount = Number(localStorage.getItem(\"giveUpCount\"));\n  const totalQuestionsAsked = Number(\n    localStorage.getItem(\"totalQuestionsAsked\")\n  );\n  const [nickname, setNickname] = useState(\"\");\n  const [copyText, setCopyText] = useState(\"\");\n  const [workTime, setWorkTime] = useState(\"\");\n  const [copySuccess, setCopySuccess] = useState(false);\n  const [submitSuccess, setSubmitSuccess] = useState(false);\n  const [isNickName, setIsNickName] = useState(false);\n  const endTime = localStorage.getItem(\"endTime\");\n  const [problem, setProblem] = useState(\"\");\n  const [explanation, setExplanation] = useState(\"\");\n\n  useEffect(() => {\n    const storedStartTime = new Date(localStorage.getItem(\"startTime\"));\n    const storedEndTime = new Date(localStorage.getItem(\"endTime\"));\n\n    const timeDifference = storedEndTime - storedStartTime;\n    const timeDifferenceInSeconds = Math.round(timeDifference / 1000);\n\n    const hours = Math.floor(timeDifferenceInSeconds / 3600);\n    const minutes = Math.floor((timeDifferenceInSeconds - hours * 3600) / 60);\n    const seconds = timeDifferenceInSeconds - hours * 3600 - minutes * 60;\n    setWorkTime(`${hours}시간 ${minutes}분 ${seconds}초`);\n  }, []);\n\n  // 각 텍스트를 state에 저장\n  useEffect(() => {\n    setCopyText(\n      `${n}번째 바다거북수프 문제를 풀었습니다! \\n질문 횟수: ${totalQuestionsAsked} \\n소요 시간: ${workTime}`\n    );\n  }, [n, gameAttempts, correctAnswers, giveUpCount, totalQuestionsAsked]);\n\n  useEffect(() => {\n    const savedNickname = localStorage.getItem(\"nickname\");\n    if (savedNickname) {\n      setNickname(savedNickname);\n    }\n  }, []);\n\n  useEffect(() => {\n    axios\n      .get(process.env.REACT_APP_API_URL + \"/getStory/\")\n      .then((response) => {\n        const data = response.data;\n        setStory(data.story);\n      })\n      .catch((error) => {\n        console.error(\"There was an error!\", error);\n      });\n  }, []);\n\n  useEffect(() => {\n    axios\n      .get(process.env.REACT_APP_API_URL + \"/getNnumber/\")\n      .then((response) => {\n        const data = response.data;\n        setN(data.n);\n        if (localStorage.getItem(\"FirstN\")) {\n          setFirstN(localStorage.getItem(\"FirstN\"));\n        } else {\n          setFirstN(n);\n        }\n      })\n      .catch((error) => {\n        console.error(\"There was an error!\", error);\n      });\n  }, []);\n\n  const handleCopy = () => {\n    navigator.clipboard.writeText(copyText);\n    setCopySuccess(true);\n    setTimeout(() => {\n      setCopySuccess(false); // 2초 후에 복사 성공 상태를 false로 변경\n    }, 500);\n    // 복사가 완료된 후 알림 메시지를 표시하거나 다른 작업을 수행할 수 있습니다.\n  };\n\n  const handleLogoClick = async () => {\n    navigate(\"/\");\n  };\n\n  const handleSubmitClick = async () => {\n    if (nickname === \"\") {\n      setIsNickName(true);\n      setTimeout(() => {\n        setIsNickName(false); // 2초 후에 복사 성공 상태를 false로 변경\n      }, 800);\n      return;\n    }\n\n    const user = nickname;\n    try {\n      const response = await axios.post(\n        process.env.REACT_APP_API_URL + \"/submit_problem/\",\n        {\n          user: user,\n          problem: problem,\n          explanation: explanation,\n        }\n      );\n    } catch (error) {\n      console.error(\"There was an error!\", error);\n    }\n    setSubmitSuccess(true);\n    setTimeout(() => {\n      setSubmitSuccess(false); // 2초 후에 복사 성공 상태를 false로 변경\n    }, 800);\n  };\n\n  if (!endTime) {\n    return (\n      <div className=\"centered-message\">\n        문제를 포기하거나 정답을 맞히면 볼 수 있습니다!\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"container\">\n        <div className=\"desktop3\">\n          <div className=\"overall_layout\">\n            {userAnswer && (\n              <div className=\"user_answer_layout\">\n                <div className=\"user_answer_box_tag\">\n                  <img\n                    className=\"My\"\n                    src={BlueSpeechBubble}\n                    alt=\"BlueSpeechBubble\"\n                    width=\"33\"\n                    height=\"30\"\n                    style={{ margin: \"10px\" }}\n                  />\n                  <img\n                    className=\"My\"\n                    src={WhiteSpeechBubble}\n                    alt=\"BlueSpeechBubble\"\n                    width=\"33\"\n                    height=\"30\"\n                    padding=\"30px\"\n                    style={{ margin: \"10px\" }}\n                  />\n                  <img\n                    className=\"My\"\n                    src={BlueSpeechBubble}\n                    alt=\"BlueSpeechBubble\"\n                    width=\"33\"\n                    height=\"30\"\n                    padding=\"30px\"\n                    style={{ margin: \"10px\" }}\n                  />\n                  <img\n                    className=\"My\"\n                    src={WhiteSpeechBubble}\n                    alt=\"BlueSpeechBubble\"\n                    width=\"33\"\n                    height=\"30\"\n                    style={{ margin: \"10px\" }}\n                  />\n                </div>\n                <div className=\"user_answer_box\">\n                  <p className=\"user_answer\">{userAnswer}</p>\n                </div>\n              </div>\n            )}\n\n            <div className=\"Ai_answer_layout\">\n              <div className=\"AI_answer_box_tag\">\n                <img\n                  className=\"My\"\n                  src={GreenTurtle}\n                  alt=\"BlueSpeechBubble\"\n                  width=\"40\"\n                  height=\"30\"\n                  padding=\"30px\"\n                  style={{ margin: \"10px\" }}\n                />\n                <img\n                  className=\"My\"\n                  src={WhiteTurtle}\n                  alt=\"BlueSpeechBubble\"\n                  width=\"40\"\n                  height=\"30\"\n                  padding=\"30px\"\n                  style={{ margin: \"10px\" }}\n                />\n                <img\n                  className=\"My\"\n                  src={GreenTurtle}\n                  alt=\"BlueSpeechBubble\"\n                  width=\"40\"\n                  height=\"30\"\n                  padding=\"30px\"\n                  style={{ margin: \"10px\" }}\n                />\n                <img\n                  className=\"My\"\n                  src={WhiteTurtle}\n                  alt=\"BlueSpeechBubble\"\n                  width=\"40\"\n                  height=\"30\"\n                  padding=\"30px\"\n                  style={{ margin: \"10px\" }}\n                />\n              </div>\n              <div className=\"AI_answer_box\">\n                <p className=\"AI_answer\">{story}</p>\n              </div>\n            </div>\n\n            <div className=\"my_play_box\">\n              <div className=\"copy_phrase\">\n                <span className=\"my_play_3\">\n                  <div className=\"line\">\n                    {userAnswer &&\n                      `축하합니다! ${totalQuestionsAsked}번째 질문에서 정답을 맞혔습니다!`}\n                    {!userAnswer &&\n                      `다음 ${n + 1}번째 수프레시피을 노려보세요!`}\n                    {n + 1}번째 수프레시피는 오늘 밤 자정(한국 시간 기준)에\n                    찾아옵니다.\n                  </div>\n                  [My Log]\n                  <br />\n                  정답 횟수:{correctAnswers} 포기 횟수:{giveUpCount}\n                  <br />\n                  가장 처음 풀었던 수프 번호: {firstN}\n                  <br />\n                  도전한 게임 횟수 : {gameAttempts}\n                  <br />\n                  물어본 총 질문 개수: {totalQuestionsAsked}\n                </span>\n              </div>\n              <div className=\"copy\">\n                <img\n                  className=\"copybutton\"\n                  src={CopyButton}\n                  alt=\"CopyButton\"\n                  width=\"45\"\n                  height=\"40\"\n                  onClick={handleCopy}\n                />\n              </div>\n              <Modal\n                isOpen={copySuccess}\n                onRequestClose={() => setCopySuccess(false)}\n                overlayClassName=\"CopyAlertOverlay\"\n                className=\"CopyAlertContent\"\n                contentLabel=\"Copy alert\"\n              >\n                <h2>복사 완료</h2>\n              </Modal>\n            </div>\n            <div className=\"my_sumbit_box\">\n              <span className=\"submit_text\">\n                더 좋은 바다 거북 수프 문제가 있다면 자유롭게 적어주세요! 추후\n                문제에 반영하겠습니다.\n              </span>\n              <div clsasNmae=\"submit_input_box\">\n                <span className=\"submit_title\">Q.</span>\n                <span className=\"submit_title\">A.</span>\n              </div>\n              <div clsasNmae=\"submit_input_box\">\n                <textarea\n                  className=\"submit_problem_box\"\n                  type=\"text\"\n                  placeholder=\"문제와 힌트를 자유롭게 입력해주세요.\"\n                  value={problem}\n                  onChange={(e) => setProblem(e.target.value)}\n                />\n\n                <textarea\n                  className=\"submit_problem_box\"\n                  type=\"text\"\n                  placeholder=\"정답과 해설을 자유롭게 입력해주세요.\"\n                  value={explanation}\n                  onChange={(e) => setExplanation(e.target.value)}\n                />\n              </div>\n\n              <img\n                className=\"copybutton\"\n                src={SubmitButton}\n                alt=\"SubmitButton\"\n                width=\"43px\"\n                height=\"43px\"\n                onClick={handleSubmitClick}\n              />\n              <Modal\n                isOpen={submitSuccess}\n                onRequestClose={() => setSubmitSuccess(false)}\n                overlayClassName=\"CopyAlertOverlay\"\n                className=\"CopyAlertContent\"\n                contentLabel=\"Copy alert\"\n              >\n                <h2>제출완료</h2>\n              </Modal>\n              <Modal\n                isOpen={isNickName}\n                onRequestClose={() => setIsNickName(false)}\n                overlayClassName=\"CopyAlertOverlay\"\n                className=\"submitAlertContent\"\n                contentLabel=\"Copy alert\"\n              >\n                <h2>\n                  닉네임을 설정해주세요.\n                  <br /> 메인 화면에서 설정이 가능합니다.\n                </h2>\n              </Modal>\n            </div>\n          </div>\n          <div className=\"border_line\">\n            <div>\n              <p className=\"nickname\">{nickname} 님</p>\n            </div>\n            <div>\n              <img className=\"profile_photo\" src={Profile} alt=\"Profile\" />\n            </div>\n          </div>\n\n          <img\n            className=\"F22F\"\n            src={F22FBeta}\n            alt=\"F22FBeta\"\n            onClick={handleLogoClick}\n          />\n          <div className=\"footer_last\">\n            <p>Copyright 2023. F22F. All rights reserved.</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","/app/src/page/problem/page.js",["57"],[],"/app/src/component/qna.js",[],[],"/app/src/component/loading.js",[],[],"/app/src/component/scrollbutton.js",["58"],[],"import React, { useState } from \"react\";\nimport scrollToTopImage from \"../images/ScrollToTopButton.png\";\n\nconst ScrollToTopButton = ({ className }) => {\n  const [isVisible, setIsVisible] = useState(false);\n\n  // 스크롤 위치에 따라 버튼의 가시성을 토글\n  const toggleVisibility = () => {\n    if (window.pageYOffset > 300) {\n      setIsVisible(true);\n    } else {\n      setIsVisible(false);\n    }\n  };\n\n  // 화면 맨 위로 스크롤\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: \"smooth\",\n    });\n  };\n\n  React.useEffect(() => {\n    window.addEventListener(\"scroll\", toggleVisibility);\n  }, []);\n\n  return (\n    <div className={className} onClick={scrollToTop}>\n      <img src={scrollToTopImage} alt=\"Go to top\" width=\"50\" height=\"40\" />\n    </div>\n  );\n};\n\nexport default ScrollToTopButton;\n",{"ruleId":"59","severity":1,"message":"60","line":4,"column":8,"nodeType":"61","messageId":"62","endLine":4,"endColumn":11},{"ruleId":"59","severity":1,"message":"63","line":8,"column":27,"nodeType":"61","messageId":"62","endLine":8,"endColumn":36},{"ruleId":"64","severity":1,"message":"65","line":59,"column":6,"nodeType":"66","endLine":59,"endColumn":73,"suggestions":"67"},{"ruleId":"64","severity":1,"message":"68","line":95,"column":6,"nodeType":"66","endLine":95,"endColumn":8,"suggestions":"69"},{"ruleId":"59","severity":1,"message":"70","line":121,"column":13,"nodeType":"61","messageId":"62","endLine":121,"endColumn":21},{"ruleId":"64","severity":1,"message":"71","line":135,"column":6,"nodeType":"66","endLine":135,"endColumn":25,"suggestions":"72"},{"ruleId":"59","severity":1,"message":"73","line":5,"column":10,"nodeType":"61","messageId":"62","endLine":5,"endColumn":19},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'workTime'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setCopyText' needs the current value of 'workTime'.","ArrayExpression",["74"],"React Hook useEffect has a missing dependency: 'n'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setFirstN' needs the current value of 'n'.",["75"],"'response' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'navigate' and 'text_t'. Either include them or remove the dependency array.",["76"],"'isVisible' is assigned a value but never used.",{"desc":"77","fix":"78"},{"desc":"79","fix":"80"},{"desc":"81","fix":"82"},"Update the dependencies array to be: [n, gameAttempts, correctAnswers, giveUpCount, totalQuestionsAsked, workTime]",{"range":"83","text":"84"},"Update the dependencies array to be: [n]",{"range":"85","text":"86"},"Update the dependencies array to be: [updateState, text, navigate, text_t]",{"range":"87","text":"88"},[2529,2596],"[n, gameAttempts, correctAnswers, giveUpCount, totalQuestionsAsked, workTime]",[3474,3476],"[n]",[4617,4636],"[updateState, text, navigate, text_t]"]