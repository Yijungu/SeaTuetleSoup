[{"/app/src/index.js":"1","/app/src/reportWebVitals.js":"2","/app/src/App.js":"3","/app/src/page/home/page.js":"4","/app/src/page/thanks/page.js":"5","/app/src/page/problem/page.js":"6","/app/src/component/qna.js":"7","/app/src/component/loading.js":"8","/app/src/component/scrollbutton.js":"9"},{"size":866,"mtime":1688603474334,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":1687682060000,"results":"12","hashOfConfig":"11"},{"size":528,"mtime":1687682060000,"results":"13","hashOfConfig":"11"},{"size":8183,"mtime":1688464315722,"results":"14","hashOfConfig":"11"},{"size":7150,"mtime":1688559205742,"results":"15","hashOfConfig":"11"},{"size":13972,"mtime":1688605084682,"results":"16","hashOfConfig":"11"},{"size":1769,"mtime":1688286434000,"results":"17","hashOfConfig":"11"},{"size":188,"mtime":1688004607000,"results":"18","hashOfConfig":"11"},{"size":846,"mtime":1688122435000,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"24"},"17z7135",{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},"/app/src/index.js",["51"],[],"import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\nimport Home from \"./page/home/page\";\nimport Thanks from \"./page/thanks/page\";\nimport Problem from \"./page/problem/page\";\nimport { AnimatePresence } from \"framer-motion\"; // 이 부분을 import 해주세요.\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <Router>\n    <AnimatePresence>\n      {\" \"}\n      {/* 이 부분에 추가했습니다. */}\n      <Routes>\n        <Route path=\"/\" element={<Home />} />\n        <Route path=\"/thanks\" element={<Thanks />} />\n        <Route path=\"/problem\" element={<Problem />} />\n      </Routes>\n    </AnimatePresence>\n  </Router>\n);\n\nreportWebVitals();\n",[],"/app/src/reportWebVitals.js",[],[],"/app/src/App.js",[],[],"/app/src/page/home/page.js",["52","53"],[],"import { Link } from \"react-router-dom\";\nimport \"./page.css\";\nimport Profile from \"../../images/Profile.png\";\nimport Check from \"../../images/Check.png\";\nimport { useNavigate } from \"react-router-dom\";\nimport { motion } from \"framer-motion\";\nimport ScrollToTopButton from \"../../component/scrollbutton\";\nimport React, { useState, useEffect } from \"react\";\n\nexport default function Home() {\n  const [nickname, setNickname] = useState(\n    localStorage.getItem(\"nickname\") || \"\"\n  );\n  const [isAnimating, setIsAnimating] = useState(false);\n  const navigate = useNavigate();\n  const handleChange = (event) => {\n    setNickname(event.target.value);\n  };\n  const handleLogoClick = async () => {\n    navigate(\"/\");\n  };\n\n  const handleKeyPress = (event) => {\n    if (event.key === \"Enter\") {\n      setIsAnimating(true);\n      setTimeout(() => setIsAnimating(false), 900);\n      localStorage.setItem(\"nickname\", nickname); // The animation lasts 900ms\n    }\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      exit={{ opacity: 0 }}\n    >\n      <div className=\"container\">\n        <div className=\"e4_2\">\n          <div className=\"e6_15\">\n            <span className=\"e6_16\">My Soup Recipe 🍽️</span>\n            <span className=\"e6_17\">AI 기반 바다거북수프 공장</span>\n          </div>\n          <div className=\"e6_18\">\n            <div className=\"start_button\"></div>\n            <Link\n              to=\"/problem\"\n              className=\"e6_20\"\n              style={{ textDecoration: \"none\" }}\n            >\n              시작하기 ✨{\" \"}\n            </Link>\n          </div>\n          <div className=\"e19_10\">\n            <div className=\"computer_top\"></div>\n            <div className=\"e6_24\"></div>\n\n            <div className=\"e6_28\"></div>\n            <div className=\"e6_25\"></div>\n            <div className=\"e6_26\"></div>\n            <div className=\"e6_27\"></div>\n            <div className=\"e12_16\">\n              <div className=\"my_chat_box\"></div>\n              <span className=\"my_chat\">바닷가 레스토랑인게 중요합니까?</span>\n            </div>\n            <div className=\"e6_30\">\n              <div className=\"AI_chat_box_2\"></div>\n              <span className=\"AI_chat_2\">\n                네. 그 남자의 과거와 관련있습니다.\n              </span>\n            </div>\n            <div className=\"e12_26\">\n              <div className=\"AI_chat_box\"></div>\n              <span className=\"AI_chat\">네. 조금은 관계 있습니다.</span>\n            </div>\n            <div className=\"e6_29\">\n              <div className=\"my_chat_box_2\"></div>\n              <span className=\"my_chat\">\n                수프가 남자의 과거와 관련이 있나요?{\" \"}\n              </span>\n            </div>\n          </div>\n          <button className=\"F22F_main\" onClick={handleLogoClick}>\n            F22F\n          </button>\n          <div className=\"e204_184\">\n            <div className=\"e186_126\"></div>\n            <div className=\"checkmakr_box\">\n              <div\n                className={`checkmark ${isAnimating ? \"animate\" : \"\"}`}\n              ></div>\n            </div>\n            <div className=\"nickname_profile_main\">\n              <div className=\"e186_114\">\n                <img\n                  className=\"profile_photo_main\"\n                  src={Profile}\n                  alt=\"Profile\"\n                  width=\"30\"\n                  height=\"30\"\n                />\n              </div>\n              <input\n                type=\"text\"\n                className=\"nickname_main\"\n                value={nickname}\n                onChange={handleChange}\n                onKeyDown={handleKeyPress}\n                placeholder=\"닉네임을 입력하세요.\"\n              />\n            </div>\n          </div>\n          <div className=\"e186_174\">\n            <p className=\"e186_175\">Q. 마이수프레시피란 무엇인가요?</p>\n            <p className=\"e186_178\">\n              A. 마이수프레시피는 매일 한 개의 바다거북수프 문제를 선정하여\n              출제하는 곳입니다. 바다거북수프 문제란 보통 기묘한 내용을 바탕으로\n              만들어지는 추리게임입니다. 어떠한 상황을 제시하면 왜 그런 상황이\n              발생했는지 추리해서 정답을 맞히면 됩니다. 상상력을 총동원해서\n              오늘의 정답을 맞혀보세요!\n            </p>\n          </div>\n          <div className=\"e186_176\">\n            <span className=\"e186_177\">질문과 답변</span>\n          </div>\n          <div className=\"e186_179\">\n            <p className=\"e186_175\">Q. 게임 방법은 무엇인가요?</p>\n            <p className=\"e186_178\">\n              A. 바다거북수프 문제가 출제되면, 유저들은 AI에게 예, 아니오로\n              대답할 수 있는 질문을 입력합니다. 질문을 할 때는 문장의 끝에{\" \"}\n              <span className=\"bold-word\">‘?’</span>를 붙여주세요. 질문에 대한\n              답을 듣게 되면, 이를 바탕으로 이야기의 전말을 추리합니다. 이렇게\n              반복하여 문답을 진행한 뒤, 정답을 맞히고 싶다면{\" \"}\n              <span className=\"bold-word\">‘Tab 키’</span>를 눌러 정답을 작성하면\n              됩니다.\n            </p>\n          </div>\n          <div className=\"e186_182\">\n            <p className=\"e186_175\">Q. AI가 어떻게 정답임을 인지하나요?</p>\n            <p className=\"e186_178\">\n              A. 오늘의 정답에서 꼭 들어가야 할 핵심 키워드들을 몇 개씩\n              정해놓습니다. AI는 유저가 제출한 답과 키워드들의 문맥이 일치하는지\n              판단합니다. 유저가 어느 정도 정답과 가까운 내용을 작성하였다면\n              정답을 공개합니다.\n            </p>\n          </div>\n          <div className=\"e186_185\">\n            <p className=\"e186_175\">\n              Q. 마이수프레시피의 문제는 어떻게 정해지나요?\n            </p>\n            <p className=\"e186_178\">\n              A. 마이수프레시피의 AI 모델을 바탕으로 이야기를 구성합니다. 그 후\n              수정, 보완하는 과정을 거쳐 좀 더 개연성 있고 흥미로운 문제가\n              완성됩니다.\n            </p>\n          </div>\n          <div className=\"e186_188\">\n            <span className=\"e186_175\">\n              Q. 하루에 한 번 이상 플레이할 수 없나요?\n            </span>\n            <span className=\"e186_178\">\n              A. 마이수프레시피는 하루에 한 문제만 출제됩니다. 마이수프레시피는\n              ‘꼬맨틀’을 바탕으로 만들게 되었습니다. 마이수프레시피의 목적은\n              꼬맨틀처럼 &quot;하루에 한 번, 여러분의 일일퀘스트&quot;가 되는\n              것입니다. 문제는 국제 표준시(UTC) 기준 매일 오후 3시 또는 한국\n              표준시(KST) 기준 자정에 바뀝니다.\n            </span>\n          </div>\n          <div className=\"e186_191\">\n            <span className=\"e186_175\">\n              Q. 여태까지 플레이한 기록을 볼 수 있나요?\n            </span>\n            <span className=\"e186_178\">\n              A. 마이수프레시피는 쿠키를 사용하여 설정 및 개인 게임 통계를\n              저장하며, 통계 수집을 위해 쿠키 정보를 수집합니다. 따라서 동일\n              브라우저에서 플레이했다면, 여태까지 플레이한 다양한 기록을 확인할\n              수 있습니다.\n            </span>\n          </div>\n          <div className=\"e186_197\">\n            <span className=\"e186_175\">\n              Q. 다른 질문이나 피드백은 어떻게 보내나요?\n            </span>\n            <span className=\"e186_178\">\n              A. 질문이나 피드백은 F2__2F@naver.com로 문의해주세요!\n            </span>\n          </div>\n          <ScrollToTopButton className=\"scroll_to_top\" />\n        </div>\n      </div>\n    </motion.div>\n  );\n}\n","/app/src/page/thanks/page.js",["54","55","56"],[],"/app/src/page/problem/page.js",["57","58"],[],"/app/src/component/qna.js",[],[],"/app/src/component/loading.js",[],[],"/app/src/component/scrollbutton.js",["59"],[],"import React, { useState } from \"react\";\nimport scrollToTopImage from \"../images/ScrollToTopButton.png\";\n\nconst ScrollToTopButton = ({ className }) => {\n  const [isVisible, setIsVisible] = useState(false);\n\n  // 스크롤 위치에 따라 버튼의 가시성을 토글\n  const toggleVisibility = () => {\n    if (window.pageYOffset > 300) {\n      setIsVisible(true);\n    } else {\n      setIsVisible(false);\n    }\n  };\n\n  // 화면 맨 위로 스크롤\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: \"smooth\",\n    });\n  };\n\n  React.useEffect(() => {\n    window.addEventListener(\"scroll\", toggleVisibility);\n  }, []);\n\n  return (\n    <div className={className} onClick={scrollToTop}>\n      <img src={scrollToTopImage} alt=\"Go to top\" width=\"50\" height=\"40\" />\n    </div>\n  );\n};\n\nexport default ScrollToTopButton;\n",{"ruleId":"60","severity":1,"message":"61","line":4,"column":8,"nodeType":"62","messageId":"63","endLine":4,"endColumn":11},{"ruleId":"60","severity":1,"message":"64","line":4,"column":8,"nodeType":"62","messageId":"63","endLine":4,"endColumn":13},{"ruleId":"60","severity":1,"message":"65","line":8,"column":27,"nodeType":"62","messageId":"63","endLine":8,"endColumn":36},{"ruleId":"60","severity":1,"message":"66","line":7,"column":8,"nodeType":"62","messageId":"63","endLine":7,"endColumn":23},{"ruleId":"60","severity":1,"message":"67","line":12,"column":10,"nodeType":"62","messageId":"63","endLine":12,"endColumn":16},{"ruleId":"68","severity":1,"message":"69","line":52,"column":6,"nodeType":"70","endLine":52,"endColumn":73,"suggestions":"71"},{"ruleId":"68","severity":1,"message":"72","line":90,"column":6,"nodeType":"70","endLine":90,"endColumn":8,"suggestions":"73"},{"ruleId":"68","severity":1,"message":"74","line":127,"column":6,"nodeType":"70","endLine":127,"endColumn":25,"suggestions":"75"},{"ruleId":"60","severity":1,"message":"76","line":5,"column":10,"nodeType":"62","messageId":"63","endLine":5,"endColumn":19},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","'Check' is defined but never used.","'useEffect' is defined but never used.","'SpoonForkButton' is defined but never used.","'motion' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'workTime'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setCopyText' needs the current value of 'workTime'.","ArrayExpression",["77"],"React Hook useEffect has a missing dependency: 'correctAnswers'. Either include it or remove the dependency array.",["78"],"React Hook useEffect has missing dependencies: 'navigate' and 'text_t'. Either include them or remove the dependency array.",["79"],"'isVisible' is assigned a value but never used.",{"desc":"80","fix":"81"},{"desc":"82","fix":"83"},{"desc":"84","fix":"85"},"Update the dependencies array to be: [n, gameAttempts, correctAnswers, giveUpCount, totalQuestionsAsked, workTime]",{"range":"86","text":"87"},"Update the dependencies array to be: [correctAnswers]",{"range":"88","text":"89"},"Update the dependencies array to be: [updateState, text, navigate, text_t]",{"range":"90","text":"91"},[2261,2328],"[n, gameAttempts, correctAnswers, giveUpCount, totalQuestionsAsked, workTime]",[3234,3236],"[correctAnswers]",[4356,4375],"[updateState, text, navigate, text_t]"]