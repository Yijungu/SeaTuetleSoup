[{"/app/src/index.js":"1","/app/src/reportWebVitals.js":"2","/app/src/App.js":"3","/app/src/page/thanks/page.js":"4","/app/src/page/home/page.js":"5","/app/src/page/problem/page.js":"6","/app/src/component/scrollbutton.js":"7","/app/src/component/tiptoolbutton.js":"8","/app/src/component/loading.js":"9","/app/src/component/qna.js":"10"},{"size":869,"mtime":1688803398139,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1687682060000,"results":"13","hashOfConfig":"12"},{"size":528,"mtime":1687682060000,"results":"14","hashOfConfig":"12"},{"size":12528,"mtime":1689602322470,"results":"15","hashOfConfig":"12"},{"size":10518,"mtime":1690366085616,"results":"16","hashOfConfig":"12"},{"size":24949,"mtime":1690364274109,"results":"17","hashOfConfig":"12"},{"size":846,"mtime":1688122435000,"results":"18","hashOfConfig":"12"},{"size":1970,"mtime":1690366692964,"results":"19","hashOfConfig":"12"},{"size":961,"mtime":1690329138700,"results":"20","hashOfConfig":"12"},{"size":9796,"mtime":1690370519825,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},"17z7135",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/app/src/index.js",["55"],[],"import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\nimport Home from \"./page/home/page\";\nimport Thanks from \"./page/thanks/page\";\nimport Problem from \"./page/problem/page\";\nimport { AnimatePresence } from \"framer-motion\"; // 이 부분을 import 해주세요.\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <Router>\n    <AnimatePresence>\n      {\" \"}\n      {/* 이 부분에 추가했습니다. */}\n      <Routes>\n        <Route path=\"/\" element={<Home />} />\n        <Route path=\"/explanation\" element={<Thanks />} />\n        <Route path=\"/issue\" element={<Problem />} />\n      </Routes>\n    </AnimatePresence>\n  </Router>\n);\n\nreportWebVitals();\n","/app/src/reportWebVitals.js",[],[],"/app/src/App.js",[],[],"/app/src/page/thanks/page.js",["56","57","58"],[],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./page.css\";\nimport { useLocation } from \"react-router-dom\";\nimport Profile from \"../../images/Profile.png\";\nimport F22FBeta from \"../../images/F22FBeta.png\";\nimport CopyButton from \"../../images/CopyButton.png\";\nimport SubmitButton from \"../../images/SubmitButton.png\";\nimport GreenTurtle from \"../../images/GreenTurtle.png\";\nimport BlueSpeechBubble from \"../../images/BlueSpeechBubble.png\";\nimport WhiteSpeechBubble from \"../../images/WhiteSpeechBubble.png\";\nimport WhiteTurtle from \"../../images/WhiteTurtle.png\";\nimport { useNavigate } from \"react-router-dom\";\nimport Modal from \"react-modal\";\n\nModal.setAppElement(\"#root\");\n\nexport default function Thanks() {\n  const location = useLocation();\n  const [story, setStory] = useState(\"\");\n  const [n, setN] = useState(0);\n  const [firstN, setFirstN] = useState(0);\n  const navigate = useNavigate();\n  const userAnswer = location.state?.userAnswer || \"\"; // state가 없는 경우를 대비해서 기본값을 제공합니다\n  const gameAttempts = Number(localStorage.getItem(\"gameAttempts\"));\n  const correctAnswers = Number(localStorage.getItem(\"correctAnswers\"));\n  const giveUpCount = Number(localStorage.getItem(\"giveUpCount\"));\n  const totalQuestionsAsked = Number(\n    localStorage.getItem(\"totalQuestionsAsked\")\n  );\n  const [nickname, setNickname] = useState(\"\");\n  const [copyText, setCopyText] = useState(\"\");\n  const [workTime, setWorkTime] = useState(\"\");\n  const [copySuccess, setCopySuccess] = useState(false);\n  const [submitSuccess, setSubmitSuccess] = useState(false);\n  const [isNickName, setIsNickName] = useState(false);\n  const endTime = localStorage.getItem(\"endTime\");\n  const [problem, setProblem] = useState(\"\");\n  const [explanation, setExplanation] = useState(\"\");\n\n  useEffect(() => {\n    const storedStartTime = new Date(localStorage.getItem(\"startTime\"));\n    const storedEndTime = new Date(localStorage.getItem(\"endTime\"));\n\n    const timeDifference = storedEndTime - storedStartTime;\n    const timeDifferenceInSeconds = Math.round(timeDifference / 1000);\n\n    const hours = Math.floor(timeDifferenceInSeconds / 3600);\n    const minutes = Math.floor((timeDifferenceInSeconds - hours * 3600) / 60);\n    const seconds = timeDifferenceInSeconds - hours * 3600 - minutes * 60;\n    setWorkTime(`${hours}시간 ${minutes}분 ${seconds}초`);\n  }, []);\n\n  // 각 텍스트를 state에 저장\n  useEffect(() => {\n    setCopyText(\n      `${n}번째 바다거북수프 문제를 풀었습니다! \\n질문 횟수: ${totalQuestionsAsked} \\n소요 시간: ${workTime}`\n    );\n  }, [n, gameAttempts, correctAnswers, giveUpCount, totalQuestionsAsked]);\n\n  useEffect(() => {\n    const savedNickname = localStorage.getItem(\"nickname\");\n    if (savedNickname) {\n      setNickname(savedNickname);\n    }\n  }, []);\n\n  useEffect(() => {\n    axios\n      .get(process.env.REACT_APP_API_URL + \"/getStory/\")\n      .then((response) => {\n        const data = response.data;\n        setStory(data.story);\n      })\n      .catch((error) => {\n        console.error(\"There was an error!\", error);\n      });\n  }, []);\n\n  useEffect(() => {\n    axios\n      .get(process.env.REACT_APP_API_URL + \"/getNnumber/\")\n      .then((response) => {\n        const data = response.data;\n        setN(data.n);\n        if (localStorage.getItem(\"FirstN\")) {\n          setFirstN(localStorage.getItem(\"FirstN\"));\n        } else {\n          setFirstN(n);\n        }\n      })\n      .catch((error) => {\n        console.error(\"There was an error!\", error);\n      });\n  }, []);\n\n  const handleCopy = () => {\n    navigator.clipboard.writeText(copyText);\n    setCopySuccess(true);\n    setTimeout(() => {\n      setCopySuccess(false); // 2초 후에 복사 성공 상태를 false로 변경\n    }, 500);\n    // 복사가 완료된 후 알림 메시지를 표시하거나 다른 작업을 수행할 수 있습니다.\n  };\n\n  const handleLogoClick = async () => {\n    navigate(\"/\");\n  };\n\n  const handleSubmitClick = async () => {\n    if (nickname === \"\") {\n      setIsNickName(true);\n      setTimeout(() => {\n        setIsNickName(false); // 2초 후에 복사 성공 상태를 false로 변경\n      }, 800);\n      return;\n    }\n\n    const user = nickname;\n    try {\n      const response = await axios.post(\n        process.env.REACT_APP_API_URL + \"/submit_problem/\",\n        {\n          user: user,\n          problem: problem,\n          explanation: explanation,\n        }\n      );\n    } catch (error) {\n      console.error(\"There was an error!\", error);\n    }\n    setSubmitSuccess(true);\n    setTimeout(() => {\n      setSubmitSuccess(false); // 2초 후에 복사 성공 상태를 false로 변경\n    }, 800);\n  };\n\n  if (!endTime) {\n    return (\n      <div className=\"centered-message\">\n        문제를 포기하거나 정답을 맞히면 볼 수 있습니다!\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"container\">\n        <div className=\"desktop3\">\n          <div className=\"overall_layout\">\n            {userAnswer && (\n              <div className=\"user_answer_layout\">\n                <div className=\"user_answer_box_tag\">\n                  <img\n                    className=\"My\"\n                    src={BlueSpeechBubble}\n                    alt=\"BlueSpeechBubble\"\n                    width=\"33\"\n                    height=\"30\"\n                    style={{ margin: \"10px\" }}\n                  />\n                  <img\n                    className=\"My\"\n                    src={WhiteSpeechBubble}\n                    alt=\"BlueSpeechBubble\"\n                    width=\"33\"\n                    height=\"30\"\n                    padding=\"30px\"\n                    style={{ margin: \"10px\" }}\n                  />\n                  <img\n                    className=\"My\"\n                    src={BlueSpeechBubble}\n                    alt=\"BlueSpeechBubble\"\n                    width=\"33\"\n                    height=\"30\"\n                    padding=\"30px\"\n                    style={{ margin: \"10px\" }}\n                  />\n                  <img\n                    className=\"My\"\n                    src={WhiteSpeechBubble}\n                    alt=\"BlueSpeechBubble\"\n                    width=\"33\"\n                    height=\"30\"\n                    style={{ margin: \"10px\" }}\n                  />\n                </div>\n                <div className=\"user_answer_box\">\n                  <p className=\"user_answer\">{userAnswer}</p>\n                </div>\n              </div>\n            )}\n\n            <div className=\"Ai_answer_layout\">\n              <div className=\"AI_answer_box_tag\">\n                <img\n                  className=\"My\"\n                  src={GreenTurtle}\n                  alt=\"BlueSpeechBubble\"\n                  width=\"40\"\n                  height=\"30\"\n                  padding=\"30px\"\n                  style={{ margin: \"10px\" }}\n                />\n                <img\n                  className=\"My\"\n                  src={WhiteTurtle}\n                  alt=\"BlueSpeechBubble\"\n                  width=\"40\"\n                  height=\"30\"\n                  padding=\"30px\"\n                  style={{ margin: \"10px\" }}\n                />\n                <img\n                  className=\"My\"\n                  src={GreenTurtle}\n                  alt=\"BlueSpeechBubble\"\n                  width=\"40\"\n                  height=\"30\"\n                  padding=\"30px\"\n                  style={{ margin: \"10px\" }}\n                />\n                <img\n                  className=\"My\"\n                  src={WhiteTurtle}\n                  alt=\"BlueSpeechBubble\"\n                  width=\"40\"\n                  height=\"30\"\n                  padding=\"30px\"\n                  style={{ margin: \"10px\" }}\n                />\n              </div>\n              <div className=\"AI_answer_box\">\n                <p className=\"AI_answer\">{story}</p>\n              </div>\n            </div>\n\n            <div className=\"my_play_box\">\n              <div className=\"copy_phrase\">\n                <span className=\"my_play_3\">\n                  <div className=\"line\">\n                    {userAnswer &&\n                      `축하합니다! ${totalQuestionsAsked}번째 질문에서 정답을 맞혔습니다!`}\n                    {!userAnswer &&\n                      `다음 ${n + 1}번째 수프레시피을 노려보세요!`}\n                    {n + 1}번째 수프레시피는 오늘 밤 자정(한국 시간 기준)에\n                    찾아옵니다.\n                  </div>\n                  [My Log]\n                  <br />\n                  정답 횟수:{correctAnswers} 포기 횟수:{giveUpCount}\n                  <br />\n                  가장 처음 풀었던 수프 번호: {firstN}\n                  <br />\n                  도전한 게임 횟수 : {gameAttempts}\n                  <br />\n                  물어본 총 질문 개수: {totalQuestionsAsked}\n                </span>\n              </div>\n              <div className=\"copy\">\n                <img\n                  className=\"copybutton\"\n                  src={CopyButton}\n                  alt=\"CopyButton\"\n                  width=\"45\"\n                  height=\"40\"\n                  onClick={handleCopy}\n                />\n              </div>\n              <Modal\n                isOpen={copySuccess}\n                onRequestClose={() => setCopySuccess(false)}\n                overlayClassName=\"CopyAlertOverlay\"\n                className=\"CopyAlertContent\"\n                contentLabel=\"Copy alert\"\n              >\n                <h2>복사 완료</h2>\n              </Modal>\n            </div>\n            <div className=\"my_sumbit_box\">\n              <span className=\"submit_text\">\n                더 좋은 바다 거북 수프 문제가 있다면 자유롭게 적어주세요! 추후\n                문제에 반영하겠습니다.\n              </span>\n              <div clsasNmae=\"submit_input_box\">\n                <span className=\"submit_title\">Q.</span>\n                <span className=\"submit_title\">A.</span>\n              </div>\n              <div clsasNmae=\"submit_input_box\">\n                <textarea\n                  className=\"submit_problem_box\"\n                  type=\"text\"\n                  placeholder=\"문제와 힌트를 자유롭게 입력해주세요.\"\n                  value={problem}\n                  onChange={(e) => setProblem(e.target.value)}\n                />\n\n                <textarea\n                  className=\"submit_problem_box\"\n                  type=\"text\"\n                  placeholder=\"정답과 해설을 자유롭게 입력해주세요.\"\n                  value={explanation}\n                  onChange={(e) => setExplanation(e.target.value)}\n                />\n              </div>\n\n              <img\n                className=\"copybutton\"\n                src={SubmitButton}\n                alt=\"SubmitButton\"\n                width=\"43px\"\n                height=\"43px\"\n                onClick={handleSubmitClick}\n              />\n              <Modal\n                isOpen={submitSuccess}\n                onRequestClose={() => setSubmitSuccess(false)}\n                overlayClassName=\"CopyAlertOverlay\"\n                className=\"CopyAlertContent\"\n                contentLabel=\"Copy alert\"\n              >\n                <h2>제출완료</h2>\n              </Modal>\n              <Modal\n                isOpen={isNickName}\n                onRequestClose={() => setIsNickName(false)}\n                overlayClassName=\"CopyAlertOverlay\"\n                className=\"submitAlertContent\"\n                contentLabel=\"Copy alert\"\n              >\n                <h2>\n                  닉네임을 설정해주세요.\n                  <br /> 메인 화면에서 설정이 가능합니다.\n                </h2>\n              </Modal>\n            </div>\n          </div>\n          <div className=\"border_line\">\n            <div>\n              <p className=\"nickname\">{nickname} 님</p>\n            </div>\n            <div>\n              <img className=\"profile_photo\" src={Profile} alt=\"Profile\" />\n            </div>\n          </div>\n\n          <img\n            className=\"F22F\"\n            src={F22FBeta}\n            alt=\"F22FBeta\"\n            onClick={handleLogoClick}\n          />\n          <div className=\"footer_last\">\n            <p className=\"Bank\">Copyright 2023. F22F. All rights reserved.</p>\n            <p className=\"Bank\">카카오뱅크 3333153034882 김영서</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","/app/src/page/home/page.js",["59"],[],"/app/src/page/problem/page.js",["60","61","62","63","64","65","66"],[],"/app/src/component/scrollbutton.js",["67"],[],"import React, { useState } from \"react\";\nimport scrollToTopImage from \"../images/ScrollToTopButton.png\";\n\nconst ScrollToTopButton = ({ className }) => {\n  const [isVisible, setIsVisible] = useState(false);\n\n  // 스크롤 위치에 따라 버튼의 가시성을 토글\n  const toggleVisibility = () => {\n    if (window.pageYOffset > 300) {\n      setIsVisible(true);\n    } else {\n      setIsVisible(false);\n    }\n  };\n\n  // 화면 맨 위로 스크롤\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: \"smooth\",\n    });\n  };\n\n  React.useEffect(() => {\n    window.addEventListener(\"scroll\", toggleVisibility);\n  }, []);\n\n  return (\n    <div className={className} onClick={scrollToTop}>\n      <img src={scrollToTopImage} alt=\"Go to top\" width=\"50\" height=\"40\" />\n    </div>\n  );\n};\n\nexport default ScrollToTopButton;\n","/app/src/component/tiptoolbutton.js",[],[],"/app/src/component/loading.js",[],[],"/app/src/component/qna.js",["68","69","70","71"],[],{"ruleId":"72","severity":1,"message":"73","line":4,"column":8,"nodeType":"74","messageId":"75","endLine":4,"endColumn":11},{"ruleId":"76","severity":1,"message":"77","line":59,"column":6,"nodeType":"78","endLine":59,"endColumn":73,"suggestions":"79"},{"ruleId":"76","severity":1,"message":"80","line":95,"column":6,"nodeType":"78","endLine":95,"endColumn":8,"suggestions":"81"},{"ruleId":"72","severity":1,"message":"82","line":121,"column":13,"nodeType":"74","messageId":"75","endLine":121,"endColumn":21},{"ruleId":"72","severity":1,"message":"83","line":8,"column":27,"nodeType":"74","messageId":"75","endLine":8,"endColumn":36},{"ruleId":"72","severity":1,"message":"84","line":21,"column":10,"nodeType":"74","messageId":"75","endLine":21,"endColumn":19},{"ruleId":"72","severity":1,"message":"85","line":35,"column":10,"nodeType":"74","messageId":"75","endLine":35,"endColumn":23},{"ruleId":"72","severity":1,"message":"86","line":38,"column":25,"nodeType":"74","messageId":"75","endLine":38,"endColumn":41},{"ruleId":"72","severity":1,"message":"87","line":40,"column":10,"nodeType":"74","messageId":"75","endLine":40,"endColumn":29},{"ruleId":"72","severity":1,"message":"88","line":40,"column":31,"nodeType":"74","messageId":"75","endLine":40,"endColumn":53},{"ruleId":"72","severity":1,"message":"89","line":46,"column":29,"nodeType":"74","messageId":"75","endLine":46,"endColumn":48},{"ruleId":"76","severity":1,"message":"90","line":150,"column":6,"nodeType":"78","endLine":150,"endColumn":25,"suggestions":"91"},{"ruleId":"72","severity":1,"message":"92","line":5,"column":10,"nodeType":"74","messageId":"75","endLine":5,"endColumn":19},{"ruleId":"72","severity":1,"message":"93","line":5,"column":8,"nodeType":"74","messageId":"75","endLine":5,"endColumn":14},{"ruleId":"94","severity":1,"message":"95","line":154,"column":9,"nodeType":"96","endLine":164,"endColumn":10},{"ruleId":"94","severity":1,"message":"95","line":224,"column":13,"nodeType":"96","endLine":234,"endColumn":14},{"ruleId":"94","severity":1,"message":"95","line":235,"column":13,"nodeType":"96","endLine":245,"endColumn":14},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'workTime'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setCopyText' needs the current value of 'workTime'.","ArrayExpression",["97"],"React Hook useEffect has a missing dependency: 'n'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setFirstN' needs the current value of 'n'.",["98"],"'response' is assigned a value but never used.","'useEffect' is defined but never used.","'isLoading' is assigned a value but never used.","'text_question' is assigned a value but never used.","'setQuestion_Step' is assigned a value but never used.","'question_2step_text' is assigned a value but never used.","'setQuestion_2step_Text' is assigned a value but never used.","'setAnswerLodingText' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'givup', 'navigate', and 'text_t'. Either include them or remove the dependency array.",["99"],"'isVisible' is assigned a value but never used.","'Button' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"100","fix":"101"},{"desc":"102","fix":"103"},{"desc":"104","fix":"105"},"Update the dependencies array to be: [n, gameAttempts, correctAnswers, giveUpCount, totalQuestionsAsked, workTime]",{"range":"106","text":"107"},"Update the dependencies array to be: [n]",{"range":"108","text":"109"},"Update the dependencies array to be: [updateState, text, givup, navigate, text_t]",{"range":"110","text":"111"},[2529,2596],"[n, gameAttempts, correctAnswers, giveUpCount, totalQuestionsAsked, workTime]",[3474,3476],"[n]",[5290,5309],"[updateState, text, givup, navigate, text_t]"]