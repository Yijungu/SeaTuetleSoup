[{"/app/src/index.js":"1","/app/src/App.js":"2","/app/src/reportWebVitals.js":"3","/app/src/page/thanks/page.js":"4","/app/src/page/home/page.js":"5","/app/src/page/problem/page.js":"6","/app/src/component/loading.js":"7","/app/src/component/scrollbutton.js":"8","/app/src/component/qna.js":"9","/app/src/component/tiptoolbutton.js":"10","/app/src/page/mobileHome/page.js":"11","/app/src/page/mobileProblem/page.js":"12","/app/src/page/mobileThanks/page.js":"13","/app/src/component/qna_m.js":"14","/app/src/component/loading_m.js":"15","/app/src/component/scrollbutton_m.js":"16","/app/src/component/tiptoolbutton_m.js":"17","/app/src/component/keybutton.js":"18","/app/src/component/keybutton_m.js":"19","/app/src/component/ratingmodal.js":"20"},{"size":2818,"mtime":1699968389238,"results":"21","hashOfConfig":"22"},{"size":528,"mtime":1687682060000,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":1687682060000,"results":"24","hashOfConfig":"22"},{"size":13921,"mtime":1693631795863,"results":"25","hashOfConfig":"22"},{"size":10262,"mtime":1694395807732,"results":"26","hashOfConfig":"22"},{"size":30495,"mtime":1693973730598,"results":"27","hashOfConfig":"22"},{"size":961,"mtime":1690329138700,"results":"28","hashOfConfig":"22"},{"size":846,"mtime":1688122435000,"results":"29","hashOfConfig":"22"},{"size":17447,"mtime":1693973829307,"results":"30","hashOfConfig":"22"},{"size":965,"mtime":1693308806869,"results":"31","hashOfConfig":"22"},{"size":10407,"mtime":1694395992344,"results":"32","hashOfConfig":"22"},{"size":29411,"mtime":1693978300155,"results":"33","hashOfConfig":"22"},{"size":12525,"mtime":1692152753074,"results":"34","hashOfConfig":"22"},{"size":18314,"mtime":1693977781678,"results":"35","hashOfConfig":"22"},{"size":963,"mtime":1691564201857,"results":"36","hashOfConfig":"22"},{"size":846,"mtime":1692863342068,"results":"37","hashOfConfig":"22"},{"size":971,"mtime":1693308872605,"results":"38","hashOfConfig":"22"},{"size":957,"mtime":1693308792140,"results":"39","hashOfConfig":"22"},{"size":971,"mtime":1693308906091,"results":"40","hashOfConfig":"22"},{"size":979,"mtime":1693560334176,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"17z7135",{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/app/src/index.js",["107"],[],"/app/src/App.js",[],[],"/app/src/reportWebVitals.js",[],[],"/app/src/page/thanks/page.js",["108","109","110"],[],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./page.css\";\nimport { useLocation } from \"react-router-dom\";\nimport Profile from \"../../images/Profile.png\";\nimport F22FBeta from \"../../images/F22FBeta.png\";\nimport CopyButton from \"../../images/CopyButton.png\";\nimport SubmitButton from \"../../images/SubmitButton.png\";\nimport GreenTurtle from \"../../images/GreenTurtle.png\";\nimport BlueSpeechBubble from \"../../images/BlueSpeechBubble.png\";\nimport WhiteSpeechBubble from \"../../images/WhiteSpeechBubble.png\";\nimport WhiteTurtle from \"../../images/WhiteTurtle.png\";\n// import RatingModal from \"../../component/ratingmodal\";\nimport { useNavigate } from \"react-router-dom\";\nimport Modal from \"react-modal\";\n\nModal.setAppElement(\"#root\");\n\nexport default function Thanks() {\n  const location = useLocation();\n  const [story, setStory] = useState(\"\");\n  const [n, setN] = useState(0);\n  const [firstN, setFirstN] = useState(0);\n  const navigate = useNavigate();\n  const userAnswer = location.state?.userAnswer || \"\"; // state가 없는 경우를 대비해서 기본값을 제공합니다\n  const gameAttempts = Number(localStorage.getItem(\"gameAttempts\"));\n  const correctAnswers = Number(localStorage.getItem(\"correctAnswers\"));\n  const giveUpCount = Number(localStorage.getItem(\"giveUpCount\"));\n  const totalQuestionsAsked = Number(\n    localStorage.getItem(\"totalQuestionsAsked\")\n  );\n  const [nickname, setNickname] = useState(\"\");\n  const [copyText, setCopyText] = useState(\"\");\n  const [workTime, setWorkTime] = useState(\"\");\n  const [copySuccess, setCopySuccess] = useState(false);\n  const [submitSuccess, setSubmitSuccess] = useState(false);\n  const [isNickName, setIsNickName] = useState(false);\n  const endTime = localStorage.getItem(\"endTime\");\n  const [problem, setProblem] = useState(\"\");\n  const [explanation, setExplanation] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(true);\n  const [rating, setRating] = useState(Number(localStorage.getItem(\"rating\")));\n  const [starFilled, setStarFilled] = useState(0);\n\n  useEffect(() => {\n    const storedStartTime = new Date(localStorage.getItem(\"startTime\"));\n    const storedEndTime = new Date(localStorage.getItem(\"endTime\"));\n\n    const timeDifference = storedEndTime - storedStartTime;\n    const timeDifferenceInSeconds = Math.round(timeDifference / 1000);\n\n    const hours = Math.floor(timeDifferenceInSeconds / 3600);\n    const minutes = Math.floor((timeDifferenceInSeconds - hours * 3600) / 60);\n    const seconds = timeDifferenceInSeconds - hours * 3600 - minutes * 60;\n    setWorkTime(`${hours}시간 ${minutes}분 ${seconds}초`);\n  }, []);\n\n  // 각 텍스트를 state에 저장\n  useEffect(() => {\n    setCopyText(\n      `${n}번째 바다거북수프 문제를 풀었습니다! \\n질문 횟수: ${totalQuestionsAsked} \\n소요 시간: ${workTime}`\n    );\n  }, [n, gameAttempts, correctAnswers, giveUpCount, totalQuestionsAsked]);\n\n  useEffect(() => {\n    const savedNickname = localStorage.getItem(\"nickname\");\n    if (savedNickname) {\n      setNickname(savedNickname);\n    }\n  }, []);\n\n  useEffect(() => {\n    axios\n      .get(process.env.REACT_APP_API_URL + \"/getStory/\")\n      .then((response) => {\n        const data = response.data;\n        setStory(data.story);\n      })\n      .catch((error) => {\n        console.error(\"There was an error!\", error);\n      });\n  }, []);\n\n  useEffect(() => {\n    axios\n      .get(process.env.REACT_APP_API_URL + \"/getNnumber/\")\n      .then((response) => {\n        const data = response.data;\n        setN(data.n);\n        if (localStorage.getItem(\"FirstN\")) {\n          setFirstN(localStorage.getItem(\"FirstN\"));\n        } else {\n          setFirstN(n);\n        }\n      })\n      .catch((error) => {\n        console.error(\"There was an error!\", error);\n      });\n  }, []);\n\n  const handleCopy = () => {\n    navigator.clipboard.writeText(copyText);\n    setCopySuccess(true);\n    setTimeout(() => {\n      setCopySuccess(false); // 2초 후에 복사 성공 상태를 false로 변경\n    }, 500);\n    // 복사가 완료된 후 알림 메시지를 표시하거나 다른 작업을 수행할 수 있습니다.\n  };\n\n  const handleLogoClick = async () => {\n    navigate(\"/\");\n  };\n\n  const handleSubmitClick = async () => {\n    if (nickname === \"\") {\n      setIsNickName(true);\n      setTimeout(() => {\n        setIsNickName(false); // 2초 후에 복사 성공 상태를 false로 변경\n      }, 800);\n      return;\n    }\n\n    const user = nickname;\n    try {\n      const response = await axios.post(\n        process.env.REACT_APP_API_URL + \"/submit_problem/\",\n        {\n          user: user,\n          problem: problem,\n          explanation: explanation,\n        }\n      );\n    } catch (error) {\n      console.error(\"There was an error!\", error);\n    }\n    setSubmitSuccess(true);\n    setTimeout(() => {\n      setSubmitSuccess(false); // 2초 후에 복사 성공 상태를 false로 변경\n    }, 800);\n  };\n\n  const handleRating = (rate) => {\n    setStarFilled(rate);\n  };\n\n  const closeRating = () => {\n    setRating(starFilled);\n    setIsOpen(false);\n    localStorage.setItem(\"rating\", starFilled);\n  };\n\n  if (!endTime) {\n    return (\n      <div className=\"centered-message\">\n        문제를 포기하거나 정답을 맞히면 볼 수 있습니다!\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"container\">\n        <div className=\"desktop3\">\n          {!rating && (\n            <Modal\n              isOpen={isOpen}\n              onRequestClose={() => setIsOpen(false)}\n              overlayClassName=\"RatingOverlay\"\n              className=\"RatingContent\"\n              contentLabel=\"Rating Modal\"\n            >\n              <h2>오늘의 레시피는 어떠셨나요?</h2>\n              <div className=\"stars\">\n                {[1, 2, 3, 4, 5].map((star) => (\n                  <span\n                    key={star}\n                    style={{ color: star <= starFilled ? \"gold\" : \"gray\" }}\n                    onClick={() => handleRating(star)}\n                  >\n                    ★\n                  </span>\n                ))}\n              </div>\n              <br />\n              <button\n                className=\"rating_button_box\"\n                onClick={() => closeRating()}\n              >\n                확인\n              </button>\n            </Modal>\n          )}\n\n          <div className=\"overall_layout\">\n            {userAnswer && (\n              <div className=\"user_answer_layout\">\n                <div className=\"user_answer_box_tag\">\n                  <img\n                    className=\"My\"\n                    src={BlueSpeechBubble}\n                    alt=\"BlueSpeechBubble\"\n                    width=\"33\"\n                    height=\"30\"\n                    style={{ margin: \"10px\" }}\n                  />\n                  <img\n                    className=\"My\"\n                    src={WhiteSpeechBubble}\n                    alt=\"BlueSpeechBubble\"\n                    width=\"33\"\n                    height=\"30\"\n                    padding=\"30px\"\n                    style={{ margin: \"10px\" }}\n                  />\n                  <img\n                    className=\"My\"\n                    src={BlueSpeechBubble}\n                    alt=\"BlueSpeechBubble\"\n                    width=\"33\"\n                    height=\"30\"\n                    padding=\"30px\"\n                    style={{ margin: \"10px\" }}\n                  />\n                  <img\n                    className=\"My\"\n                    src={WhiteSpeechBubble}\n                    alt=\"BlueSpeechBubble\"\n                    width=\"33\"\n                    height=\"30\"\n                    style={{ margin: \"10px\" }}\n                  />\n                </div>\n                <div className=\"user_answer_box\">\n                  <p className=\"user_answer\">{userAnswer}</p>\n                </div>\n              </div>\n            )}\n\n            <div className=\"Ai_answer_layout\">\n              <div className=\"AI_answer_box_tag\">\n                <img\n                  className=\"My\"\n                  src={GreenTurtle}\n                  alt=\"BlueSpeechBubble\"\n                  width=\"40\"\n                  height=\"30\"\n                  padding=\"30px\"\n                  style={{ margin: \"10px\" }}\n                />\n                <img\n                  className=\"My\"\n                  src={WhiteTurtle}\n                  alt=\"BlueSpeechBubble\"\n                  width=\"40\"\n                  height=\"30\"\n                  padding=\"30px\"\n                  style={{ margin: \"10px\" }}\n                />\n                <img\n                  className=\"My\"\n                  src={GreenTurtle}\n                  alt=\"BlueSpeechBubble\"\n                  width=\"40\"\n                  height=\"30\"\n                  padding=\"30px\"\n                  style={{ margin: \"10px\" }}\n                />\n                <img\n                  className=\"My\"\n                  src={WhiteTurtle}\n                  alt=\"BlueSpeechBubble\"\n                  width=\"40\"\n                  height=\"30\"\n                  padding=\"30px\"\n                  style={{ margin: \"10px\" }}\n                />\n              </div>\n              <div className=\"AI_answer_box\">\n                <p className=\"AI_answer\">{story}</p>\n              </div>\n            </div>\n\n            <div className=\"my_play_box\">\n              <div className=\"copy_phrase\">\n                <span className=\"my_play_3\">\n                  <div className=\"line\">\n                    {userAnswer &&\n                      `축하합니다! ${totalQuestionsAsked}번째 질문에서 정답을 맞혔습니다!`}\n                    {!userAnswer &&\n                      `다음 ${n + 1}번째 수프레시피을 노려보세요!`}\n                    <br />\n                    {n + 1}번째 수프레시피는 오늘 밤 자정(한국 시간 기준)에\n                    찾아옵니다.\n                  </div>\n                  [My Log]\n                  <br />\n                  {`정답 횟수: ${correctAnswers} 포기 횟수: ${giveUpCount}`}\n                  <br />\n                  가장 처음 풀었던 수프 번호: {firstN}\n                  <br />\n                  도전한 게임 횟수 : {gameAttempts}\n                  <br />\n                  물어본 총 질문 개수: {totalQuestionsAsked}\n                </span>\n              </div>\n              <div className=\"copy\">\n                <img\n                  className=\"copybutton\"\n                  src={CopyButton}\n                  alt=\"CopyButton\"\n                  width=\"45\"\n                  height=\"40\"\n                  onClick={handleCopy}\n                />\n              </div>\n              <Modal\n                isOpen={copySuccess}\n                onRequestClose={() => setCopySuccess(false)}\n                overlayClassName=\"CopyAlertOverlay\"\n                className=\"CopyAlertContent\"\n                contentLabel=\"Copy alert\"\n              >\n                <h2>복사 완료</h2>\n              </Modal>\n            </div>\n            <div className=\"my_sumbit_box\">\n              <span className=\"submit_text\">\n                더 좋은 바다 거북 수프 문제가 있다면 자유롭게 적어주세요! 추후\n                문제에 반영하겠습니다.\n              </span>\n              <div clsasNmae=\"submit_input_box\">\n                <span className=\"submit_title\">Q.</span>\n                <span className=\"submit_title\">A.</span>\n              </div>\n              <div clsasNmae=\"submit_input_box\">\n                <textarea\n                  className=\"submit_problem_box\"\n                  type=\"text\"\n                  placeholder=\"문제와 힌트를 입력해주세요.\"\n                  value={problem}\n                  onChange={(e) => setProblem(e.target.value)}\n                />\n\n                <textarea\n                  className=\"submit_problem_box\"\n                  type=\"text\"\n                  placeholder=\"정답과 해설을 입력해주세요.\"\n                  value={explanation}\n                  onChange={(e) => setExplanation(e.target.value)}\n                />\n              </div>\n\n              <img\n                className=\"copybutton\"\n                src={SubmitButton}\n                alt=\"SubmitButton\"\n                width=\"43px\"\n                height=\"43px\"\n                onClick={handleSubmitClick}\n              />\n              <Modal\n                isOpen={submitSuccess}\n                onRequestClose={() => setSubmitSuccess(false)}\n                overlayClassName=\"CopyAlertOverlay\"\n                className=\"CopyAlertContent\"\n                contentLabel=\"Copy alert\"\n              >\n                <h2>제출완료</h2>\n              </Modal>\n              <Modal\n                isOpen={isNickName}\n                onRequestClose={() => setIsNickName(false)}\n                overlayClassName=\"CopyAlertOverlay\"\n                className=\"submitAlertContent\"\n                contentLabel=\"Copy alert\"\n              >\n                <h2>\n                  닉네임을 설정해주세요.\n                  <br /> 메인 화면에서 설정이 가능합니다.\n                </h2>\n              </Modal>\n            </div>\n          </div>\n          <div className=\"border_line\">\n            <div>\n              <p className=\"nickname\">{nickname} 님</p>\n            </div>\n            <div>\n              <img className=\"profile_photo\" src={Profile} alt=\"Profile\" />\n            </div>\n          </div>\n\n          <img\n            className=\"F22F\"\n            src={F22FBeta}\n            alt=\"F22FBeta\"\n            onClick={handleLogoClick}\n          />\n          <div className=\"footer_last\">\n            <p className=\"Bank\">Copyright 2023. F22F. All rights reserved.</p>\n            <p className=\"Bank\">카카오뱅크 3333153034882 김영서</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","/app/src/page/home/page.js",["111"],[],"/app/src/page/problem/page.js",["112","113","114","115","116","117","118","119","120","121"],[],"/app/src/component/loading.js",[],[],"/app/src/component/scrollbutton.js",["122"],[],"import React, { useState } from \"react\";\nimport scrollToTopImage from \"../images/ScrollToTopButton.png\";\n\nconst ScrollToTopButton = ({ className }) => {\n  const [isVisible, setIsVisible] = useState(false);\n\n  // 스크롤 위치에 따라 버튼의 가시성을 토글\n  const toggleVisibility = () => {\n    if (window.pageYOffset > 300) {\n      setIsVisible(true);\n    } else {\n      setIsVisible(false);\n    }\n  };\n\n  // 화면 맨 위로 스크롤\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: \"smooth\",\n    });\n  };\n\n  React.useEffect(() => {\n    window.addEventListener(\"scroll\", toggleVisibility);\n  }, []);\n\n  return (\n    <div className={className} onClick={scrollToTop}>\n      <img src={scrollToTopImage} alt=\"Go to top\" width=\"50\" height=\"40\" />\n    </div>\n  );\n};\n\nexport default ScrollToTopButton;\n","/app/src/component/qna.js",["123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138"],[],"/app/src/component/tiptoolbutton.js",[],[],"/app/src/page/mobileHome/page.js",["139"],[],"/app/src/page/mobileProblem/page.js",["140","141","142","143","144","145","146","147","148","149","150","151","152"],[],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport QnA from \"../../component/qna_m\";\nimport \"./mb_page.css\";\nimport F22FBeta from \"../../images/F22FBeta.png\";\nimport { useNavigate } from \"react-router-dom\";\nimport Profile from \"../../images/Profile.png\";\nimport SendButton from \"../../images/SendButton.png\";\nimport Loading from \"../../component/loading_m\";\nimport { motion } from \"framer-motion\";\nimport Modal from \"react-modal\";\nimport ScrollToTopButton from \"../../component/scrollbutton\";\nimport ButtonWithTip from \"../../component/tiptoolbutton_m\";\nimport KeyButton from \"../../component/keybutton_m\";\nimport Draggable from \"react-draggable\";\n\nexport default function Problem() {\n  const [showTipOne, setShowTipOne] = useState(false);\n  const [showTipTwo, setShowTipTwo] = useState(false);\n  const [text, setText] = useState(\"\");\n  const [qnas, setQnas] = useState([]);\n  const [question, setQuestion] = useState(\"\");\n  const navigate = useNavigate();\n  const [shake, setShake] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [gameAttempts, setGameAttempts] = useState(0);\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n  const [giveUpCount, setGiveUpCount] = useState(0);\n  const [totalQuestionsAsked, setTotalQuestionsAsked] = useState(0);\n  const [updateState, setUpdateState] = useState(false);\n  const [tabPressed, setTabPressed] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [nickname, setNickname] = useState(\"\");\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [hintmodalIsOpen, setHintModalIsOpen] = useState(false);\n  const [text_t, setText_t] = useState(\"\");\n  const [author, setAuthor] = useState(\"\");\n  const [main_character, setMainCharacter] = useState(\"\");\n  const [text_question, setText_Question] = useState(\n    \"어떤 대상에 대해 알고 싶으신가요?\"\n  );\n  const [question_step, setQuestion_Step] = useState(true);\n  const [givup, setGiveUp] = useState(false);\n  const [question_2step_text, setQuestion_2step_Text] = useState(\"\");\n  const [hintText, setHintText] = useState(\"힌트 A: 기본적인 힌트\");\n  const [hintText2, setHintText2] = useState(\"힌트 B: 결정적인 힌트\");\n  const [hint, setHint] = useState(\"없음\");\n  const [hint2, setHint2] = useState(\"없음\");\n  const [background_text, setBackGroudText] = useState(\"정답을 입력하세요\");\n  const [background_question_text, setBackgroundQuestionText] =\n    useState(\"주어를 넣어 질문을 입력하세요.\");\n  const [answerloding_text, setAnswerLodingText] =\n    useState(\"정답을 확인중입니다.\");\n  const [position, setPosition] = useState({ x: 2, y: 0 });\n  const [isActive, setIsActive] = useState(false);\n  const [n, setN] = useState(0);\n\n  useEffect(() => {\n    axios\n      .get(process.env.REACT_APP_API_URL + \"/getNnumber/\")\n      .then((response) => {\n        const data = response.data;\n        setN(data.n);\n      });\n  }, []);\n  useEffect(() => {\n    const now = new Date();\n    const currentDate = `${now.getFullYear()}-${\n      now.getMonth() + 1\n    }-${now.getDate()}`;\n    let lastTime = localStorage.getItem(\"startTime\");\n    if (lastTime) {\n      lastTime = new Date(lastTime);\n      const lastDate = `${lastTime.getFullYear()}-${\n        lastTime.getMonth() + 1\n      }-${lastTime.getDate()}`;\n      if (lastDate !== currentDate) {\n        localStorage.setItem(\"startTime\", now);\n        localStorage.setItem(\"endTime\", \"\");\n      }\n    } else {\n      localStorage.setItem(\"startTime\", now);\n      localStorage.setItem(\"endTime\", \"\");\n    }\n  }, []);\n\n  useEffect(() => {\n    const savedNickname = localStorage.getItem(\"nickname\");\n    if (savedNickname) {\n      setNickname(savedNickname);\n    }\n  }, []);\n\n  useEffect(() => {\n    // 현재 날짜를 구한다\n    const now = new Date();\n    const currentDate = `${now.getFullYear()}-${\n      now.getMonth() + 1\n    }-${now.getDate()}`;\n\n    // 이전에 저장한 날짜를 불러온다\n    const savedDate = localStorage.getItem(\"date\");\n    const savedGameAttempts = Number(localStorage.getItem(\"gameAttempts\"));\n    const savedCorrectAnswers = Number(localStorage.getItem(\"correctAnswers\"));\n\n    const savedGiveUpCount = Number(localStorage.getItem(\"giveUpCount\"));\n    const savedTotalQuestionsAsked = Number(\n      localStorage.getItem(\"totalQuestionsAsked\")\n    );\n\n    // 날짜가 다르면 모든 값을 초기화한다\n    if (savedDate !== currentDate) {\n      setGameAttempts(savedGameAttempts + 1);\n      setTotalQuestionsAsked(0);\n      // localStorage.setItem(\"date\", currentDate);\n    } else {\n      // 같은 날이면 localStorage에 저장된 값을 불러온다\n      setGameAttempts(savedGameAttempts || 1);\n      setTotalQuestionsAsked(savedTotalQuestionsAsked || 0);\n    }\n\n    setCorrectAnswers(savedCorrectAnswers);\n\n    setGiveUpCount(savedGiveUpCount || 0);\n  }, []);\n\n  // useEffect(() => {\n  //   console.log(qnas);\n  // }, [qnas]);\n\n  // 값들이 변경될 때마다 localStorage에 저장한다\n  useEffect(() => {\n    localStorage.setItem(\"gameAttempts\", gameAttempts);\n    localStorage.setItem(\"giveUpCount\", giveUpCount);\n    localStorage.setItem(\"correctAnswers\", correctAnswers);\n    localStorage.setItem(\"totalQuestionsAsked\", totalQuestionsAsked);\n  }, [gameAttempts, correctAnswers, giveUpCount, totalQuestionsAsked]);\n\n  const saveQnas = (qnas) => {\n    localStorage.setItem(\"qnas\", JSON.stringify(qnas));\n  };\n\n  useEffect(() => {\n    const savedQnas = JSON.parse(localStorage.getItem(\"qnas\"));\n    const savedDate = localStorage.getItem(\"date\");\n\n    const now = new Date();\n    const currentDate = `${now.getFullYear()}-${\n      now.getMonth() + 1\n    }-${now.getDate()}`;\n\n    if (savedQnas && savedDate === currentDate) {\n      setQnas(savedQnas);\n    } else {\n      localStorage.removeItem(\"qnas\");\n      localStorage.setItem(\"date\", currentDate);\n      setShowTipTwo(true);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (updateState) {\n      if (givup) {\n        navigate(\"/mobileExplanation\", { state: { userAnswer: \"\" } });\n        setUpdateState(false);\n      } else {\n        navigate(\"/mobileExplanation\", { state: { userAnswer: text_t } });\n        // 상태 업데이트 완료 표시\n        setUpdateState(false);\n      }\n    }\n  }, [updateState, text]);\n\n  useEffect(() => {\n    axios\n      .get(process.env.REACT_APP_API_URL + \"/getQuestion/\")\n      .then((response) => {\n        const data = response.data;\n        setQuestion(data.question);\n        setAuthor(data.author);\n        setMainCharacter(data.main_character);\n        setHint(\n          data.hints && data.hints.length > 0 ? data.hints[0].hint : null\n        );\n        setHint2(\n          data.hints && data.hints.length > 1 ? data.hints[1].hint : null\n        );\n      })\n      .catch((error) => {\n        console.error(\"There was an error!\", error);\n      });\n  }, []);\n\n  useEffect(() => {\n    if (tabPressed) {\n      setText_Question(\"정답을 말해주세요.\");\n    } else {\n      if (question_step) {\n        setText_Question(\"질문을 완성해주세요.\");\n      } else {\n        setText_Question(\"어떤 대상에 대해 알고 싶으신가요?\");\n      }\n    }\n  }, [tabPressed, question_step]);\n\n  const handleChange = (e) => {\n    setText(e.target.value);\n  };\n\n  const handleLogoClick = async () => {\n    navigate(\"/\");\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      handleSendClick();\n    }\n    if (e.key === \"Tab\") {\n      e.preventDefault();\n      setTabPressed(!tabPressed);\n      if (position.x == 24) {\n        setTimeout(() => setPosition({ x: 5, y: 0 }));\n        updateColor();\n      } else {\n        setTimeout(() => setPosition({ x: 24, y: 0 }));\n        updateColor();\n      }\n      // setQuestion_Step(false);\n    }\n    if (e.key === \"Escape\") {\n      // setQuestion_Step(false);\n    }\n  };\n\n  const handleCheck = () => {\n    setTabPressed(!tabPressed);\n    if (position.x == 24) {\n      setTimeout(() => setPosition({ x: 4, y: 0 }));\n      updateColor();\n    } else {\n      setTimeout(() => setPosition({ x: 24, y: 0 }));\n      updateColor();\n    }\n  };\n\n  const handleGiveUpClick = async () => {\n    closeModal();\n    const lastGiveUpDate = localStorage.getItem(\"lastGiveUpDate\");\n    const lastCorrectDate = localStorage.getItem(\"lastCorrectDate\");\n    const now = new Date();\n    const currentDate = `${now.getFullYear()}-${\n      now.getMonth() + 1\n    }-${now.getDate()}`;\n    localStorage.setItem(\"endTime\", now);\n    // 마지막으로 정답을 맞춘 날짜와 현재 날짜를 비교하기\n    if (lastGiveUpDate !== currentDate && lastCorrectDate !== currentDate) {\n      // 현재 날짜를 마지막으로 정답을 맞춘 날짜로 저장\n\n      localStorage.setItem(\"lastGiveUpDate\", currentDate);\n\n      // 실패 횟수를 증가\n      setGiveUpCount(giveUpCount + 1);\n    }\n    setGiveUp(true);\n    setUpdateState(true);\n  };\n\n  const handleSendClick = async () => {\n    if (isProcessing) return;\n    // 실행 중이 아니라면, 실행 중임을 표시\n    setIsProcessing(true);\n    try {\n      setText_t(text);\n      const text_x = text;\n      setTimeout(() => setText(\"\"), 0);\n      // console.log(process.env.REACT_APP_API_URL + \"/submit/\");\n      if (tabPressed === true) {\n        // 텍스트가 '정답'으로 시작하면 다른 주소로 요청\n        if (text_x.length <= 5) {\n          setBackGroudText(\" \");\n          setTotalQuestionsAsked(totalQuestionsAsked + 1);\n          setTimeout(() => setBackGroudText(\"정답을 입력하세요.\"), 600);\n        } else {\n          setBackGroudText(\"\");\n          const anotherResponse = await axios.post(\n            process.env.REACT_APP_API_URL + \"/submit/\",\n            {\n              data: text_x,\n            }\n          );\n          // console.log(anotherResponse.data.response);\n          if (\n            anotherResponse.data.response.startsWith(\"네\") ||\n            anotherResponse.data.response.startsWith(\"예\") ||\n            anotherResponse.data.response.startsWith(\"맞습니다\") ||\n            anotherResponse.data.response.startsWith(\"Yes\")\n          ) {\n            const now = new Date();\n            const currentDate = `${now.getFullYear()}-${\n              now.getMonth() + 1\n            }-${now.getDate()}`;\n\n            localStorage.setItem(\"endTime\", now);\n            // 마지막으로 정답을 맞춘 날짜를 불러오기\n            const lastCorrectDate = localStorage.getItem(\"lastCorrectDate\");\n            const lastGiveUpDate = localStorage.getItem(\"lastGiveUpDate\");\n\n            // 마지막으로 정답을 맞춘 날짜와 현재 날짜를 비교하기\n            if (\n              lastGiveUpDate !== currentDate &&\n              lastCorrectDate !== currentDate\n            ) {\n              // 현재 날짜를 마지막으로 정답을 맞춘 날짜로 저장\n              localStorage.setItem(\"lastCorrectDate\", currentDate);\n\n              // 정답 횟수를 증가\n              setCorrectAnswers((prev) => prev + 1);\n\n              // setUpdateState(true);\n            }\n            setUpdateState(true);\n          } else {\n            setShake(true); // 실패 시 shake 상태를 true로 변경\n            let savedQnas = JSON.parse(localStorage.getItem(\"qnas\"));\n            const newQnas = [\n              {\n                question: text_x,\n                aiQuestion: anotherResponse.data.ai_question,\n                aiQuestionKr: anotherResponse.data.ai_question_kr,\n                answerSubmit: true,\n                answer: \"정답이 아닙니다.\",\n              },\n              ...savedQnas,\n            ];\n            setQnas(newQnas);\n            saveQnas(newQnas);\n            setTotalQuestionsAsked(totalQuestionsAsked + 1);\n            setTimeout(() => setShake(false), 500);\n          }\n          setBackGroudText(\"정답을 입력하세요.\");\n        }\n      } else {\n        if (text_x.length <= 5) {\n          setBackgroundQuestionText(\"\");\n          setTotalQuestionsAsked(totalQuestionsAsked + 1);\n          setTimeout(\n            () => setBackgroundQuestionText(\"주어를 넣어 질문을 입력하세요\"),\n            600\n          );\n        } else {\n          // let savedQnas = JSON.parse(localStorage.getItem(\"qnas\"));\n          const tempQnas = [\n            {\n              question: text_x,\n              aiQuestion: <Loading />,\n              answer: <Loading />,\n              aiQuestionKr: <Loading />,\n              answerSubmit: false,\n              isDelete: false,\n              index: totalQuestionsAsked,\n            },\n            ...qnas,\n          ];\n          let total = totalQuestionsAsked;\n          setQnas(tempQnas); // 임시로 Loading 애니메이션을 표시\n\n          const response = await axios.post(\n            process.env.REACT_APP_API_URL + \"/question/\",\n            {\n              data: text_x,\n            }\n          );\n          let updatedQnas;\n          // console.log(response.data.ai_question);\n\n          let responseString = JSON.stringify(response.data.response);\n          let responseProblemCheck = JSON.stringify(\n            response.data.problem_check\n          );\n          console.log(responseString);\n          console.log(responseProblemCheck);\n          if (\n            responseProblemCheck.includes(\"what\") ||\n            responseProblemCheck.includes(\"you\")\n          ) {\n            // if (true) {\n            updatedQnas = tempQnas.map((qna) =>\n              qna.question === text_x && qna.index === total\n                ? {\n                    question: text_x,\n                    aiQuestion: response.data.ai_question,\n                    aiQuestionKr: response.data.ai_question_kr,\n                    answerSubmit: false,\n                    isDelete: false,\n                    answer: \"리롤(reroll) 버튼을 누르거나 질문을 수정해주세요.\",\n                    problem_check: response.data.problem_check,\n                  }\n                : qna\n            );\n          } else if (\n            responseString.includes(\"Yes\") ||\n            responseString.includes(\"네\")\n          ) {\n            // if (true) {\n            updatedQnas = tempQnas.map((qna) =>\n              qna.question === text_x && qna.index === total\n                ? {\n                    question: text_x,\n                    aiQuestion: response.data.ai_question,\n                    aiQuestionKr: response.data.ai_question_kr,\n                    answerSubmit: false,\n                    isDelete: false,\n                    answer: \"네.\",\n                    problem_check: response.data.problem_check,\n                  }\n                : qna\n            );\n          } else if (\n            responseString.includes(\"아니오\") ||\n            responseString.includes(\"No\")\n          ) {\n            updatedQnas = tempQnas.map((qna) =>\n              qna.question === text_x && qna.index === total\n                ? {\n                    question: text_x,\n                    aiQuestion: response.data.ai_question,\n                    aiQuestionKr: response.data.ai_question_kr,\n                    answerSubmit: false,\n                    isDelete: false,\n                    answer: \"아니오.\",\n                    problem_check: response.data.problem_check,\n                  }\n                : qna\n            );\n          } else if (\n            responseString.includes(\"Probably no\") ||\n            responseString.includes(\"아마도 아닐 겁니다.\")\n          ) {\n            updatedQnas = tempQnas.map((qna) =>\n              qna.question === text_x && qna.index === total\n                ? {\n                    question: text_x,\n                    aiQuestion: response.data.ai_question,\n                    aiQuestionKr: response.data.ai_question_kr,\n                    answerSubmit: false,\n                    isDelete: false,\n                    answer: \"아마도 아닐 겁니다.\",\n                    problem_check: response.data.problem_check,\n                  }\n                : qna\n            );\n          } else if (\n            responseString.includes(\"Probably\") ||\n            responseString.includes(\"아마도 그럴겁니다\")\n          ) {\n            updatedQnas = tempQnas.map((qna) =>\n              qna.question === text_x && qna.index === total\n                ? {\n                    question: text_x,\n                    aiQuestion: response.data.ai_question,\n                    aiQuestionKr: response.data.ai_question_kr,\n                    answerSubmit: false,\n                    isDelete: false,\n                    answer: \"아마도 맞을 겁니다.\",\n                    problem_check: response.data.problem_check,\n                  }\n                : qna\n            );\n          } else {\n            updatedQnas = tempQnas.map((qna) =>\n              qna.question === text_x && qna.index === total\n                ? {\n                    question: text_x,\n                    aiQuestion: response.data.ai_question,\n                    aiQuestionKr: response.data.ai_question_kr,\n                    answerSubmit: false,\n                    isDelete: false,\n                    answer: \"중요하지 않은 정보입니다.\",\n                    problem_check: response.data.problem_check,\n                  }\n                : qna\n            );\n          }\n          // 모든 질문이 로딩이 완료되었는지 확인\n          const allLoaded = updatedQnas.every(\n            (qna) => qna.aiQuestion !== Loading && qna.answer !== Loading\n          );\n\n          // 로딩 중인 항목이 없을 경우에만 저장\n          if (allLoaded) {\n            setQnas(updatedQnas); // 응답으로 교체\n            saveQnas(updatedQnas);\n            setTotalQuestionsAsked(totalQuestionsAsked + 1);\n          } // localStorage에 저장\n        }\n      }\n      setIsProcessing(false);\n    } catch (error) {\n      setIsLoading(false);\n      setIsProcessing(false);\n      console.error(error);\n    }\n  };\n\n  const trackPosition = (e, ui) => {\n    // Calculate the new color based on newX\n    // Here you may need to adapt the calculation based on your actual min and max x values\n\n    // Update position\n    setPosition({ x: ui.x, y: ui.y });\n  };\n\n  const updateColor = () => {\n    const newColor = !tabPressed ? \"#5374e8\" : \"#5DB075\";\n\n    // Set the new background color to the button\n    document.querySelector(\".slider_m\").style.border = \"1px solid \" + newColor;\n    document.querySelector(\".slider-button_m\").style.background = newColor;\n    document.querySelector(\".send_button_problem_m\").style.background =\n      newColor;\n  };\n\n  const endDrag = () => {\n    if (position.x < 14) {\n      setPosition({ x: 4, y: 0 });\n      setTabPressed(false);\n      updateColor();\n    } else {\n      setPosition({ x: 24, y: 0 });\n      setTabPressed(true);\n      updateColor();\n    }\n  };\n\n  function openModal() {\n    setModalIsOpen(true);\n  }\n\n  function closeModal() {\n    setModalIsOpen(false);\n  }\n\n  function openHintModal() {\n    setHintModalIsOpen(true);\n  }\n\n  function closeHintModal() {\n    setHintModalIsOpen(false);\n  }\n\n  function nl2br(str) {\n    return str.split(\"\\n\").map((line, index, array) => (\n      <>\n        {line}\n        {index === array.length - 1 ? null : <br />}\n      </>\n    ));\n  }\n  const toggleTipOne = () => {\n    setShowTipOne(!showTipOne);\n    setShowTipTwo(false);\n  };\n\n  const toggleTipTwo = () => {\n    setShowTipTwo(!showTipTwo);\n    setShowTipOne(false);\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      exit={{ opacity: 0 }}\n    >\n      <div className=\"container_m\">\n        <div className=\"all_m\">\n          <div className=\"up_bar_m\">\n            <img\n              className=\"F22F_main_m\"\n              src={F22FBeta}\n              alt=\"F22FBeta\"\n              onClick={handleLogoClick}\n            />\n\n            <div className=\"nickname_profile_main_m\">\n              <img\n                className=\"profile_photo_main_m\"\n                src={Profile}\n                alt=\"Profile\"\n              />\n\n              <p className=\"nickname_m\">{nickname} 님</p>\n            </div>\n          </div>\n\n          <div className=\"problem_box_m\">\n            <span className=\"description_m\">\n              질문을 적으면 '네' 또는 '아니오’ 형식의 답을 받을 수 있습니다.\n              <br />\n              버튼을 눌러{\" \" + n}번째 문제의 정답을 맞혀보세요.\n            </span>\n\n            <div className=\"problem_main_box_m\">\n              <div className=\"question_box_m\">\n                <span className=\"Question_m\">{nl2br(question)}</span>\n              </div>\n            </div>\n            {author && <span className=\"source_m\">{`출처 : ${author}`}</span>}\n            <div className=\"check_click_box_m\">\n              <div className=\"circle_check_box_m\">\n                <div className={`slider_m`} onClick={handleCheck}>\n                  <Draggable\n                    axis=\"x\"\n                    bounds={{ left: 4, right: 24, top: 0, bottom: 0 }}\n                    position={position}\n                  >\n                    <div className=\"slider-button_m\"></div>\n                  </Draggable>\n                </div>\n              </div>\n              <div className=\"hint_giveup_button_box_m\">\n                <button className=\"giveup_button_m\" onClick={openHintModal}>\n                  힌트보기\n                </button>\n                <Modal\n                  isOpen={hintmodalIsOpen}\n                  onRequestClose={closeHintModal}\n                  overlayClassName=\"ModalOverlay_m\"\n                  className=\"ModalContent_m\"\n                  contentLabel=\"힌트\"\n                >\n                  <button\n                    style={{\n                      position: \"absolute\",\n                      right: \"-3%\",\n                      top: \"3px\",\n                      fontSize: \"20px\",\n                      outline: \"none\",\n                      border: \"0px\",\n                      color: \"#000000\",\n                      backgroundColor: \"#ffffff\",\n                    }}\n                    onClick={closeHintModal}\n                  >\n                    x\n                  </button>\n                  <p\n                    style={{\n                      fontSize: \"15px\",\n                      // marginBottom: \"30px\",\n                      letterSpacing: \"-0.1px\",\n                    }}\n                  >\n                    버튼을 눌러 힌트를 확인해보세요.\n                  </p>\n                  <div\n                    style={{ borderTop: \"1px solid black\" }}\n                    className=\"hint-button-container_m\"\n                  >\n                    <button\n                      style={{\n                        marginTop: \"24px\",\n                        borderRadius: \"4px\",\n                        border: \"1px solid #2d2d2d\",\n                        backgroundColor: \"#ffffff\",\n                        padding: \"7px\",\n                      }}\n                      className=\"hint_button_m\"\n                      onClick={() => setHintText(hint)}\n                    >\n                      {hintText}\n                    </button>\n                    <button\n                      style={{\n                        borderRadius: \"4px\",\n                        border: \"1px solid #2d2d2d\",\n                        backgroundColor: \"#ffffff\",\n                        padding: \"7px\",\n                      }}\n                      className=\"hint_button_m\"\n                      onClick={() => setHintText2(hint2)}\n                    >\n                      {hintText2}\n                    </button>\n                  </div>\n                </Modal>\n                <button className=\"giveup_button_m\" onClick={openModal}>\n                  포기하기\n                </button>\n\n                <Modal\n                  isOpen={modalIsOpen}\n                  onRequestClose={closeModal}\n                  overlayClassName=\"ModalOverlay_m\"\n                  className=\"ModalContent_m\"\n                  contentLabel=\"포기 확인\"\n                >\n                  <p\n                    style={{\n                      fontSize: \"15px\",\n                      marginBottom: \"1rem\",\n                    }}\n                  >\n                    정말 포기하시겠습니까?\n                  </p>\n                  <div className=\"button-container_m\">\n                    <button\n                      style={{\n                        borderRadius: \"4px\",\n                        border: \"1px solid #2d2d2d\",\n                        backgroundColor: \"#ffffff\",\n                        paddingTop: \"0.4rem\",\n                        paddingBottom: \"0.4rem\",\n                        paddingRight: \"0.6rem\",\n                        paddingLeft: \"0.6rem\",\n                        marginLeft: \"4rem\",\n                      }}\n                      onClick={closeModal}\n                    >\n                      취소\n                    </button>\n                    <button\n                      style={{\n                        color: \"#ffffff\",\n                        borderRadius: \"4px\",\n                        border: \"1px solid #2d2d2d\",\n                        backgroundColor: \"#3E5FD1\",\n                        paddingTop: \"0.4rem\",\n                        paddingBottom: \"0.4rem\",\n                        paddingRight: \"0.6rem\",\n                        paddingLeft: \"0.6rem\",\n                        marginRight: \"4rem\",\n                      }}\n                      onClick={handleGiveUpClick}\n                    >\n                      확인\n                    </button>\n                  </div>\n                </Modal>\n              </div>\n            </div>\n            <div className=\"qeustion_text_box_m\">\n              <input\n                className={`textbox_m ${shake ? \"shake\" : \"\"}`}\n                value={text}\n                onChange={handleChange}\n                onKeyDown={handleKeyPress}\n                placeholder={\n                  !tabPressed\n                    ? question_step\n                      ? `${background_question_text}`\n                      : `ex) ${main_character}`\n                    : `${background_text}`\n                }\n              />\n\n              {background_text === \"\" && (\n                <div className=\"wave_box\">\n                  {answerloding_text.split(\"\").map((char, i) => (\n                    <span\n                      style={{\n                        animationDelay: `${(i - 1) * 100}ms`,\n                        left:\n                          i > 2 ? `${1.5 + (i - 3) * 0.6}rem` : `${i * 0.6}rem`,\n                      }}\n                      className=\"wave_m\"\n                    >\n                      {char}\n                    </span>\n                  ))}\n                </div>\n              )}\n              {(background_question_text === \"\" || background_text === \" \") && (\n                <h1 className=\"shake-text_m\">5자 이상 입력해주세요.</h1>\n              )}\n              <div className=\"slider_box_m\">\n                <div\n                  className=\"send_button_problem_m\"\n                  onClick={handleSendClick}\n                >\n                  <img\n                    className=\"SendButton_m\"\n                    src={SendButton}\n                    alt=\"SendButton\"\n                    width=\"10\"\n                    height=\"15\"\n                    style={{\n                      top: \"3px\",\n                      cursor: \"move\",\n                      transition: \"left 0.3s ease-out\",\n                    }}\n                  />\n                </div>\n              </div>\n            </div>\n            {qnas.map(\n              (qna, index) =>\n                !qna.isDelete && (\n                  <div\n                    className=\"QAresponse_m\"\n                    style={{ zIndex: qnas.length - index }}\n                    key={index}\n                  >\n                    <QnA\n                      question={qna.question}\n                      aiQuestion={qna.aiQuestion}\n                      aiQuestionKr={qna.aiQuestionKr}\n                      answerSubmit={qna.answerSubmit}\n                      index={index}\n                      answer={qna.answer}\n                      opened={index === 0 ? true : false}\n                      borderBottomStrength={\n                        index === qnas.length - 1 ? \"0.01px\" : \"0px\"\n                      }\n                      updateQnas={(indexToDelete) => {\n                        setQnas(\n                          qnas.map((qna, index) =>\n                            index === indexToDelete\n                              ? { ...qna, isDelete: true }\n                              : qna\n                          )\n                        );\n                      }}\n                      problemCheck={qna.problem_check}\n                    />\n                  </div>\n                )\n            )}\n          </div>\n        </div>\n        <div>\n          <KeyButton initialShowTip={showTipOne} toggleTip={toggleTipOne} />\n        </div>\n        <div>\n          <ButtonWithTip initialShowTip={showTipTwo} toggleTip={toggleTipTwo} />\n        </div>\n        <div>\n          <ScrollToTopButton className=\"scroll_to_top_m\" />\n        </div>\n      </div>\n    </motion.div>\n  );\n}\n","/app/src/page/mobileThanks/page.js",["153","154","155"],[],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./mb_page.css\";\nimport { useLocation } from \"react-router-dom\";\nimport Profile from \"../../images/Profile.png\";\nimport F22FBeta from \"../../images/F22FBeta.png\";\nimport CopyButton from \"../../images/CopyButton.png\";\nimport SubmitButton from \"../../images/SubmitButton.png\";\nimport GreenTurtle from \"../../images/GreenTurtle.png\";\nimport BlueSpeechBubble from \"../../images/BlueSpeechBubble.png\";\nimport WhiteSpeechBubble from \"../../images/WhiteSpeechBubble.png\";\nimport WhiteTurtle from \"../../images/WhiteTurtle.png\";\nimport { useNavigate } from \"react-router-dom\";\nimport Modal from \"react-modal\";\n\nModal.setAppElement(\"#root\");\n\nexport default function Thanks() {\n  const location = useLocation();\n  const [story, setStory] = useState(\"\");\n  const [n, setN] = useState(0);\n  const [firstN, setFirstN] = useState(0);\n  const navigate = useNavigate();\n  const userAnswer = location.state?.userAnswer || \"\"; // state가 없는 경우를 대비해서 기본값을 제공합니다\n  const gameAttempts = Number(localStorage.getItem(\"gameAttempts\"));\n  const correctAnswers = Number(localStorage.getItem(\"correctAnswers\"));\n  const giveUpCount = Number(localStorage.getItem(\"giveUpCount\"));\n  const totalQuestionsAsked = Number(\n    localStorage.getItem(\"totalQuestionsAsked\")\n  );\n  const [nickname, setNickname] = useState(\"\");\n  const [copyText, setCopyText] = useState(\"\");\n  const [workTime, setWorkTime] = useState(\"\");\n  const [copySuccess, setCopySuccess] = useState(false);\n  const [submitSuccess, setSubmitSuccess] = useState(false);\n  const [isNickName, setIsNickName] = useState(false);\n  const endTime = localStorage.getItem(\"endTime\");\n  const [problem, setProblem] = useState(\"\");\n  const [explanation, setExplanation] = useState(\"\");\n\n  useEffect(() => {\n    const storedStartTime = new Date(localStorage.getItem(\"startTime\"));\n    const storedEndTime = new Date(localStorage.getItem(\"endTime\"));\n\n    const timeDifference = storedEndTime - storedStartTime;\n    const timeDifferenceInSeconds = Math.round(timeDifference / 1000);\n\n    const hours = Math.floor(timeDifferenceInSeconds / 3600);\n    const minutes = Math.floor((timeDifferenceInSeconds - hours * 3600) / 60);\n    const seconds = timeDifferenceInSeconds - hours * 3600 - minutes * 60;\n    setWorkTime(`${hours}시간 ${minutes}분 ${seconds}초`);\n  }, []);\n\n  // 각 텍스트를 state에 저장\n  useEffect(() => {\n    setCopyText(\n      `${n}번째 바다거북수프 문제를 풀었습니다! \\n질문 횟수: ${totalQuestionsAsked} \\n소요 시간: ${workTime}`\n    );\n  }, [n, gameAttempts, correctAnswers, giveUpCount, totalQuestionsAsked]);\n\n  useEffect(() => {\n    const savedNickname = localStorage.getItem(\"nickname\");\n    if (savedNickname) {\n      setNickname(savedNickname);\n    }\n  }, []);\n\n  useEffect(() => {\n    axios\n      .get(process.env.REACT_APP_API_URL + \"/getStory/\")\n      .then((response) => {\n        const data = response.data;\n        setStory(data.story);\n      })\n      .catch((error) => {\n        console.error(\"There was an error!\", error);\n      });\n  }, []);\n\n  useEffect(() => {\n    axios\n      .get(process.env.REACT_APP_API_URL + \"/getNnumber/\")\n      .then((response) => {\n        const data = response.data;\n        setN(data.n);\n        if (localStorage.getItem(\"FirstN\")) {\n          setFirstN(localStorage.getItem(\"FirstN\"));\n        } else {\n          setFirstN(n);\n        }\n      })\n      .catch((error) => {\n        console.error(\"There was an error!\", error);\n      });\n  }, []);\n\n  const handleCopy = () => {\n    navigator.clipboard.writeText(copyText);\n    setCopySuccess(true);\n    setTimeout(() => {\n      setCopySuccess(false); // 2초 후에 복사 성공 상태를 false로 변경\n    }, 500);\n    // 복사가 완료된 후 알림 메시지를 표시하거나 다른 작업을 수행할 수 있습니다.\n  };\n\n  const handleLogoClick = async () => {\n    navigate(\"/\");\n  };\n\n  const handleSubmitClick = async () => {\n    if (nickname === \"\") {\n      setIsNickName(true);\n      setTimeout(() => {\n        setIsNickName(false); // 2초 후에 복사 성공 상태를 false로 변경\n      }, 800);\n      return;\n    }\n\n    const user = nickname;\n    try {\n      const response = await axios.post(\n        process.env.REACT_APP_API_URL + \"/submit_problem/\",\n        {\n          user: user,\n          problem: problem,\n          explanation: explanation,\n        }\n      );\n    } catch (error) {\n      console.error(\"There was an error!\", error);\n    }\n    setSubmitSuccess(true);\n    setTimeout(() => {\n      setSubmitSuccess(false); // 2초 후에 복사 성공 상태를 false로 변경\n    }, 800);\n  };\n\n  if (!endTime) {\n    return (\n      <div className=\"centered-message_m\">\n        문제를 포기하거나 정답을 맞히면 볼 수 있습니다!\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"container_m\">\n        <div className=\"desktop3_m\">\n          <div className=\"up_bar_m\">\n            <img\n              className=\"F22F_main_m\"\n              src={F22FBeta}\n              alt=\"F22FBeta\"\n              onClick={handleLogoClick}\n            />\n\n            <div className=\"nickname_profile_main_m\">\n              <img\n                className=\"profile_photo_main_m\"\n                src={Profile}\n                alt=\"Profile\"\n              />\n\n              <p className=\"nickname_m\">{nickname} 님</p>\n            </div>\n          </div>\n          <div className=\"overall_layout_m\">\n            {userAnswer && (\n              <div className=\"AI_answer_layout_m\">\n                <div className=\"user_answer_box_tag_m\">\n                  <img\n                    className=\"My_m\"\n                    src={BlueSpeechBubble}\n                    alt=\"BlueSpeechBubble\"\n                    width=\"20\"\n                    height=\"18\"\n                    style={{ margin: \"10px\" }}\n                  />\n                  <img\n                    className=\"My_m\"\n                    src={WhiteSpeechBubble}\n                    alt=\"BlueSpeechBubble\"\n                    width=\"20\"\n                    height=\"18\"\n                    style={{ margin: \"10px\" }}\n                  />\n                  <img\n                    className=\"My_m\"\n                    src={BlueSpeechBubble}\n                    alt=\"BlueSpeechBubble\"\n                    width=\"20\"\n                    height=\"18\"\n                    style={{ margin: \"10px\" }}\n                  />\n                  <img\n                    className=\"My_m\"\n                    src={WhiteSpeechBubble}\n                    alt=\"BlueSpeechBubble\"\n                    width=\"20\"\n                    height=\"18\"\n                    style={{ margin: \"10px\" }}\n                  />\n                </div>\n                <div className=\"AI_answer_box_m\">\n                  <p className=\"AI_answer_m\">{userAnswer}</p>\n                </div>\n              </div>\n            )}\n\n            <div className=\"AI_answer_layout_m\">\n              <div className=\"AI_answer_box_tag_m\">\n                <img\n                  className=\"MY_m\"\n                  src={GreenTurtle}\n                  alt=\"BlueSpeechBubble\"\n                  width=\"20\"\n                  height=\"15\"\n                  style={{ margin: \"10px\" }}\n                />\n                <img\n                  className=\"MY_m\"\n                  src={WhiteTurtle}\n                  alt=\"BlueSpeechBubble\"\n                  width=\"20\"\n                  height=\"15\"\n                  style={{ margin: \"10px\" }}\n                />\n                <img\n                  className=\"MY_m\"\n                  src={GreenTurtle}\n                  alt=\"BlueSpeechBubble\"\n                  width=\"20\"\n                  height=\"15\"\n                  style={{ margin: \"10px\" }}\n                />\n                <img\n                  className=\"MY_m\"\n                  src={WhiteTurtle}\n                  alt=\"BlueSpeechBubble\"\n                  width=\"20\"\n                  height=\"15\"\n                  style={{ margin: \"10px\" }}\n                />\n              </div>\n              <div className=\"AI_answer_box_m\">\n                <p className=\"AI_answer_m\">{story}</p>\n              </div>\n            </div>\n\n            <div className=\"my_play_box_m\">\n              <div className=\"copy_m\">\n                <img\n                  className=\"copybutton_m\"\n                  src={CopyButton}\n                  alt=\"CopyButton\"\n                  width=\"32\"\n                  height=\"30\"\n                  onClick={handleCopy}\n                />\n              </div>\n              <div className=\"copy_phrase_m\">\n                <span className=\"my_play_3_m\">\n                  <div className=\"line_m\">\n                    {userAnswer &&\n                      `축하합니다! ${totalQuestionsAsked}번째 질문에서 정답을 맞혔습니다!`}\n                    {!userAnswer &&\n                      `다음 ${n + 1}번째 수프레시피를 노려보세요!`}\n                    <br />\n                    {n + 1}번째 수프레시피는 오늘 밤 자정에 찾아옵니다.\n                  </div>\n                  [My Log]\n                  <br />\n                  {`정답 횟수: ${correctAnswers} 포기 횟수: ${giveUpCount}`}\n                  <br />\n                  가장 처음 풀었던 수프 번호: {firstN}\n                  <br />\n                  도전한 게임 횟수 : {gameAttempts}\n                  <br />\n                  물어본 총 질문 개수: {totalQuestionsAsked}\n                </span>\n              </div>\n              <Modal\n                isOpen={copySuccess}\n                onRequestClose={() => setCopySuccess(false)}\n                overlayClassName=\"CopyAlertOverlay\"\n                className=\"CopyAlertContent\"\n                contentLabel=\"Copy alert\"\n              >\n                <h2>복사 완료</h2>\n              </Modal>\n            </div>\n            <div className=\"my_sumbit_box_m\">\n              <div className=\"copy_m\">\n                <img\n                  className=\"copybutton_m\"\n                  src={SubmitButton}\n                  alt=\"SubmitButton\"\n                  width=\"30\"\n                  height=\"30\"\n                  onClick={handleSubmitClick}\n                />\n              </div>\n              <span className=\"submit_text_m\">\n                더 좋은 바다 거북 수프 문제가 있다면 자유롭게 적어주세요! <br />\n                추후 문제에 반영하겠습니다.\n              </span>\n              <div className=\"submit_input_box_m\">\n                <div className=\"submit_input_box_one_m\">\n                  <textarea\n                    className=\"submit_problem_box_m\"\n                    type=\"text\"\n                    placeholder=\"문제와 힌트를 입력해주세요.\"\n                    value={problem}\n                    onChange={(e) => setProblem(e.target.value)}\n                  />\n                </div>\n                <div className=\"submit_input_box_one_m\">\n                  <textarea\n                    className=\"submit_problem_box_m\"\n                    type=\"text\"\n                    placeholder=\"정답과 해설을 입력해주세요.\"\n                    value={explanation}\n                    onChange={(e) => setExplanation(e.target.value)}\n                  />\n                </div>\n              </div>\n\n              <Modal\n                isOpen={submitSuccess}\n                onRequestClose={() => setSubmitSuccess(false)}\n                overlayClassName=\"CopyAlertOverlay\"\n                className=\"CopyAlertContent\"\n                contentLabel=\"Copy alert\"\n              >\n                <h2>제출완료</h2>\n              </Modal>\n              <Modal\n                isOpen={isNickName}\n                onRequestClose={() => setIsNickName(false)}\n                overlayClassName=\"CopyAlertOverlay\"\n                className=\"submitAlertContent\"\n                contentLabel=\"Copy alert\"\n              >\n                <h2>\n                  닉네임을 설정해주세요.\n                  <br /> 메인 화면에서 설정이 가능합니다.\n                </h2>\n              </Modal>\n            </div>\n          </div>\n\n          <div className=\"footer_m\">\n            <p className=\"Bank_m\">카카오뱅크 3333153034882 김영서</p>\n            <p className=\"Bank_m\">Copyright 2023. F22F. All rights reserved.</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","/app/src/component/qna_m.js",["156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171"],[],"/app/src/component/loading_m.js",[],[],"/app/src/component/scrollbutton_m.js",["172"],[],"import React, { useState } from \"react\";\nimport scrollToTopImage from \"../images/ScrollToTopButton.png\";\n\nconst ScrollToTopButton = ({ className }) => {\n  const [isVisible, setIsVisible] = useState(false);\n\n  // 스크롤 위치에 따라 버튼의 가시성을 토글\n  const toggleVisibility = () => {\n    if (window.pageYOffset > 300) {\n      setIsVisible(true);\n    } else {\n      setIsVisible(false);\n    }\n  };\n\n  // 화면 맨 위로 스크롤\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: \"smooth\",\n    });\n  };\n\n  React.useEffect(() => {\n    window.addEventListener(\"scroll\", toggleVisibility);\n  }, []);\n\n  return (\n    <div className={className} onClick={scrollToTop}>\n      <img src={scrollToTopImage} alt=\"Go to top\" width=\"45\" height=\"35\" />\n    </div>\n  );\n};\n\nexport default ScrollToTopButton;\n","/app/src/component/tiptoolbutton_m.js",[],[],"/app/src/component/keybutton.js",[],[],"/app/src/component/keybutton_m.js",[],[],"/app/src/component/ratingmodal.js",[],[],{"ruleId":"173","severity":1,"message":"174","line":11,"column":8,"nodeType":"175","messageId":"176","endLine":11,"endColumn":11},{"ruleId":"177","severity":1,"message":"178","line":63,"column":6,"nodeType":"179","endLine":63,"endColumn":73,"suggestions":"180"},{"ruleId":"177","severity":1,"message":"181","line":99,"column":6,"nodeType":"179","endLine":99,"endColumn":8,"suggestions":"182"},{"ruleId":"173","severity":1,"message":"183","line":125,"column":13,"nodeType":"175","messageId":"176","endLine":125,"endColumn":21},{"ruleId":"173","severity":1,"message":"184","line":8,"column":27,"nodeType":"175","messageId":"176","endLine":8,"endColumn":36},{"ruleId":"173","severity":1,"message":"185","line":25,"column":10,"nodeType":"175","messageId":"176","endLine":25,"endColumn":19},{"ruleId":"173","severity":1,"message":"186","line":39,"column":10,"nodeType":"175","messageId":"176","endLine":39,"endColumn":23},{"ruleId":"173","severity":1,"message":"187","line":42,"column":25,"nodeType":"175","messageId":"176","endLine":42,"endColumn":41},{"ruleId":"173","severity":1,"message":"188","line":44,"column":10,"nodeType":"175","messageId":"176","endLine":44,"endColumn":29},{"ruleId":"173","severity":1,"message":"189","line":44,"column":31,"nodeType":"175","messageId":"176","endLine":44,"endColumn":53},{"ruleId":"173","severity":1,"message":"190","line":52,"column":29,"nodeType":"175","messageId":"176","endLine":52,"endColumn":48},{"ruleId":"173","severity":1,"message":"191","line":55,"column":10,"nodeType":"175","messageId":"176","endLine":55,"endColumn":18},{"ruleId":"173","severity":1,"message":"192","line":55,"column":20,"nodeType":"175","messageId":"176","endLine":55,"endColumn":31},{"ruleId":"177","severity":1,"message":"193","line":172,"column":6,"nodeType":"179","endLine":172,"endColumn":25,"suggestions":"194"},{"ruleId":"195","severity":1,"message":"196","line":234,"column":22,"nodeType":"197","messageId":"198","endLine":234,"endColumn":24},{"ruleId":"173","severity":1,"message":"199","line":5,"column":10,"nodeType":"175","messageId":"176","endLine":5,"endColumn":19},{"ruleId":"173","severity":1,"message":"200","line":42,"column":10,"nodeType":"175","messageId":"176","endLine":42,"endColumn":18},{"ruleId":"201","severity":1,"message":"202","line":241,"column":9,"nodeType":"203","endLine":251,"endColumn":10},{"ruleId":"201","severity":1,"message":"202","line":312,"column":13,"nodeType":"203","endLine":323,"endColumn":14},{"ruleId":"201","severity":1,"message":"202","line":324,"column":13,"nodeType":"203","endLine":335,"endColumn":14},{"ruleId":"195","severity":1,"message":"196","line":395,"column":31,"nodeType":"197","messageId":"198","endLine":395,"endColumn":33},{"ruleId":"195","severity":1,"message":"196","line":413,"column":31,"nodeType":"197","messageId":"198","endLine":413,"endColumn":33},{"ruleId":"195","severity":1,"message":"196","line":431,"column":32,"nodeType":"197","messageId":"198","endLine":431,"endColumn":34},{"ruleId":"195","severity":1,"message":"196","line":431,"column":59,"nodeType":"197","messageId":"198","endLine":431,"endColumn":61},{"ruleId":"195","severity":1,"message":"196","line":456,"column":28,"nodeType":"197","messageId":"198","endLine":456,"endColumn":30},{"ruleId":"195","severity":1,"message":"196","line":456,"column":54,"nodeType":"197","messageId":"198","endLine":456,"endColumn":56},{"ruleId":"195","severity":1,"message":"196","line":464,"column":28,"nodeType":"197","messageId":"198","endLine":464,"endColumn":30},{"ruleId":"195","severity":1,"message":"196","line":464,"column":54,"nodeType":"197","messageId":"198","endLine":464,"endColumn":56},{"ruleId":"195","severity":1,"message":"196","line":472,"column":28,"nodeType":"197","messageId":"198","endLine":472,"endColumn":30},{"ruleId":"195","severity":1,"message":"196","line":472,"column":54,"nodeType":"197","messageId":"198","endLine":472,"endColumn":56},{"ruleId":"195","severity":1,"message":"196","line":480,"column":28,"nodeType":"197","messageId":"198","endLine":480,"endColumn":30},{"ruleId":"195","severity":1,"message":"196","line":480,"column":54,"nodeType":"197","messageId":"198","endLine":480,"endColumn":56},{"ruleId":"173","severity":1,"message":"184","line":9,"column":27,"nodeType":"175","messageId":"176","endLine":9,"endColumn":36},{"ruleId":"173","severity":1,"message":"185","line":25,"column":10,"nodeType":"175","messageId":"176","endLine":25,"endColumn":19},{"ruleId":"173","severity":1,"message":"186","line":39,"column":10,"nodeType":"175","messageId":"176","endLine":39,"endColumn":23},{"ruleId":"173","severity":1,"message":"187","line":42,"column":25,"nodeType":"175","messageId":"176","endLine":42,"endColumn":41},{"ruleId":"173","severity":1,"message":"188","line":44,"column":10,"nodeType":"175","messageId":"176","endLine":44,"endColumn":29},{"ruleId":"173","severity":1,"message":"189","line":44,"column":31,"nodeType":"175","messageId":"176","endLine":44,"endColumn":53},{"ruleId":"173","severity":1,"message":"190","line":52,"column":29,"nodeType":"175","messageId":"176","endLine":52,"endColumn":48},{"ruleId":"173","severity":1,"message":"191","line":55,"column":10,"nodeType":"175","messageId":"176","endLine":55,"endColumn":18},{"ruleId":"173","severity":1,"message":"192","line":55,"column":20,"nodeType":"175","messageId":"176","endLine":55,"endColumn":31},{"ruleId":"177","severity":1,"message":"193","line":172,"column":6,"nodeType":"179","endLine":172,"endColumn":25,"suggestions":"204"},{"ruleId":"195","severity":1,"message":"196","line":222,"column":22,"nodeType":"197","messageId":"198","endLine":222,"endColumn":24},{"ruleId":"195","severity":1,"message":"196","line":238,"column":20,"nodeType":"197","messageId":"198","endLine":238,"endColumn":22},{"ruleId":"173","severity":1,"message":"205","line":506,"column":9,"nodeType":"175","messageId":"176","endLine":506,"endColumn":22},{"ruleId":"173","severity":1,"message":"206","line":524,"column":9,"nodeType":"175","messageId":"176","endLine":524,"endColumn":16},{"ruleId":"177","severity":1,"message":"178","line":59,"column":6,"nodeType":"179","endLine":59,"endColumn":73,"suggestions":"207"},{"ruleId":"177","severity":1,"message":"181","line":95,"column":6,"nodeType":"179","endLine":95,"endColumn":8,"suggestions":"208"},{"ruleId":"173","severity":1,"message":"183","line":121,"column":13,"nodeType":"175","messageId":"176","endLine":121,"endColumn":21},{"ruleId":"173","severity":1,"message":"200","line":43,"column":10,"nodeType":"175","messageId":"176","endLine":43,"endColumn":18},{"ruleId":"201","severity":1,"message":"202","line":256,"column":9,"nodeType":"203","endLine":266,"endColumn":10},{"ruleId":"201","severity":1,"message":"202","line":337,"column":15,"nodeType":"203","endLine":345,"endColumn":16},{"ruleId":"201","severity":1,"message":"202","line":346,"column":15,"nodeType":"203","endLine":356,"endColumn":16},{"ruleId":"195","severity":1,"message":"196","line":422,"column":31,"nodeType":"197","messageId":"198","endLine":422,"endColumn":33},{"ruleId":"195","severity":1,"message":"196","line":435,"column":31,"nodeType":"197","messageId":"198","endLine":435,"endColumn":33},{"ruleId":"195","severity":1,"message":"196","line":452,"column":32,"nodeType":"197","messageId":"198","endLine":452,"endColumn":34},{"ruleId":"195","severity":1,"message":"196","line":452,"column":59,"nodeType":"197","messageId":"198","endLine":452,"endColumn":61},{"ruleId":"195","severity":1,"message":"196","line":476,"column":28,"nodeType":"197","messageId":"198","endLine":476,"endColumn":30},{"ruleId":"195","severity":1,"message":"196","line":476,"column":54,"nodeType":"197","messageId":"198","endLine":476,"endColumn":56},{"ruleId":"195","severity":1,"message":"196","line":484,"column":28,"nodeType":"197","messageId":"198","endLine":484,"endColumn":30},{"ruleId":"195","severity":1,"message":"196","line":484,"column":54,"nodeType":"197","messageId":"198","endLine":484,"endColumn":56},{"ruleId":"195","severity":1,"message":"196","line":492,"column":28,"nodeType":"197","messageId":"198","endLine":492,"endColumn":30},{"ruleId":"195","severity":1,"message":"196","line":492,"column":54,"nodeType":"197","messageId":"198","endLine":492,"endColumn":56},{"ruleId":"195","severity":1,"message":"196","line":500,"column":28,"nodeType":"197","messageId":"198","endLine":500,"endColumn":30},{"ruleId":"195","severity":1,"message":"196","line":500,"column":54,"nodeType":"197","messageId":"198","endLine":500,"endColumn":56},{"ruleId":"173","severity":1,"message":"199","line":5,"column":10,"nodeType":"175","messageId":"176","endLine":5,"endColumn":19},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'workTime'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setCopyText' needs the current value of 'workTime'.","ArrayExpression",["209"],"React Hook useEffect has a missing dependency: 'n'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setFirstN' needs the current value of 'n'.",["210"],"'response' is assigned a value but never used.","'useEffect' is defined but never used.","'isLoading' is assigned a value but never used.","'text_question' is assigned a value but never used.","'setQuestion_Step' is assigned a value but never used.","'question_2step_text' is assigned a value but never used.","'setQuestion_2step_Text' is assigned a value but never used.","'setAnswerLodingText' is assigned a value but never used.","'isActive' is assigned a value but never used.","'setIsActive' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'givup', 'navigate', and 'text_t'. Either include them or remove the dependency array.",["211"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'isVisible' is assigned a value but never used.","'isDelete' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["212"],"'trackPosition' is assigned a value but never used.","'endDrag' is assigned a value but never used.",["213"],["214"],{"desc":"215","fix":"216"},{"desc":"217","fix":"218"},{"desc":"219","fix":"220"},{"desc":"219","fix":"221"},{"desc":"215","fix":"222"},{"desc":"217","fix":"223"},"Update the dependencies array to be: [n, gameAttempts, correctAnswers, giveUpCount, totalQuestionsAsked, workTime]",{"range":"224","text":"225"},"Update the dependencies array to be: [n]",{"range":"226","text":"227"},"Update the dependencies array to be: [updateState, text, givup, navigate, text_t]",{"range":"228","text":"229"},{"range":"230","text":"229"},{"range":"231","text":"225"},{"range":"232","text":"227"},[2764,2831],"[n, gameAttempts, correctAnswers, giveUpCount, totalQuestionsAsked, workTime]",[3709,3711],"[n]",[6024,6043],"[updateState, text, givup, navigate, text_t]",[6046,6065],[2532,2599],[3477,3479]]